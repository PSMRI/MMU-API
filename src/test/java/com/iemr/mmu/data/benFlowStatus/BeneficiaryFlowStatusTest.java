package com.iemr.mmu.data.benFlowStatus;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.mock;

import com.iemr.mmu.data.masterdata.registrar.GenderMaster;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

@ExtendWith(MockitoExtension.class)
class BeneficiaryFlowStatusTest {
    @InjectMocks
    private BeneficiaryFlowStatus beneficiaryFlowStatus;

   
    @Test
    void testGetBeneficiaryFlowStatusForLeftPanel() {
        // Arrange, Act and Assert
        assertNull(BeneficiaryFlowStatus.getBeneficiaryFlowStatusForLeftPanel(new ArrayList<>()));
    }

   
    @Test
    void testGetBeneficiaryPastVisitHistory() {
        // Arrange and Act
        ArrayList<BeneficiaryFlowStatus> actualBeneficiaryPastVisitHistory = BeneficiaryFlowStatus
                .getBeneficiaryPastVisitHistory(new ArrayList<>());

        // Assert
        assertTrue(actualBeneficiaryPastVisitHistory.isEmpty());
    }

    
    @Test
    void testGetdOB() {
        // Arrange, Act and Assert
        assertNull((new BeneficiaryFlowStatus()).getdOB());
        assertNull((new BeneficiaryFlowStatus(1L, 1L, 1L, mock(Timestamp.class), (short) 1, "Just cause", "Visit Category"))
                .getdOB());
    }

   
    @Test
    void testGettC_SpecialistLabFlag() {
        // Arrange, Act and Assert
        assertNull((new BeneficiaryFlowStatus()).gettC_SpecialistLabFlag());
        assertNull((new BeneficiaryFlowStatus(1L, 1L, 1L, mock(Timestamp.class), (short) 1, "Just cause", "Visit Category"))
                .gettC_SpecialistLabFlag());
    }

   
    @Test
    void testGettCSpecialistUserID() {
        // Arrange, Act and Assert
        assertNull((new BeneficiaryFlowStatus()).gettCSpecialistUserID());
        assertNull((new BeneficiaryFlowStatus(1L, 1L, 1L, mock(Timestamp.class), (short) 1, "Just cause", "Visit Category"))
                .gettCSpecialistUserID());
    }

  
    @Test
    void testGettCRequestDate() {
        // Arrange, Act and Assert
        assertNull((new BeneficiaryFlowStatus()).gettCRequestDate());
        assertNull((new BeneficiaryFlowStatus(1L, 1L, 1L, mock(Timestamp.class), (short) 1, "Just cause", "Visit Category"))
                .gettCRequestDate());
    }

    @Test
    void testGettersAndSetters() {
        // Arrange and Act
        BeneficiaryFlowStatus actualBeneficiaryFlowStatus = new BeneficiaryFlowStatus();
        actualBeneficiaryFlowStatus.setAge("Age");
        actualBeneficiaryFlowStatus.setAgeVal(42);
        actualBeneficiaryFlowStatus.setAgentId("42");
        actualBeneficiaryFlowStatus.setAuth("Auth");
        actualBeneficiaryFlowStatus.setBenArrivedFlag(true);
        actualBeneficiaryFlowStatus.setBenFlowID(1L);
        actualBeneficiaryFlowStatus.setBenImage("Ben Image");
        actualBeneficiaryFlowStatus.setBenName("Ben Name");
        ArrayList<BenPhoneMaps> benPhoneMaps = new ArrayList<>();
        actualBeneficiaryFlowStatus.setBenPhoneMaps(benPhoneMaps);
        actualBeneficiaryFlowStatus.setBenVisitCode(1L);
        Timestamp benVisitDate = mock(Timestamp.class);
        actualBeneficiaryFlowStatus.setBenVisitDate(benVisitDate);
        actualBeneficiaryFlowStatus.setBenVisitID(1L);
        actualBeneficiaryFlowStatus.setBenVisitNo((short) 1);
        actualBeneficiaryFlowStatus.setBen_age_val(42);
        actualBeneficiaryFlowStatus.setBeneficiaryID(1L);
        actualBeneficiaryFlowStatus.setBeneficiaryName("Beneficiary Name");
        actualBeneficiaryFlowStatus.setBeneficiaryRegID(1L);
        actualBeneficiaryFlowStatus.setBloodGroup("Blood Group");
        actualBeneficiaryFlowStatus.setConsultantID(1);
        actualBeneficiaryFlowStatus.setConsultantName("Consultant Name");
        Timestamp consultationDate = mock(Timestamp.class);
        actualBeneficiaryFlowStatus.setConsultationDate(consultationDate);
        actualBeneficiaryFlowStatus.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        Timestamp createdDate = mock(Timestamp.class);
        actualBeneficiaryFlowStatus.setCreatedDate(createdDate);
        actualBeneficiaryFlowStatus.setDeleted(true);
        actualBeneficiaryFlowStatus.setDistrictID(1);
        actualBeneficiaryFlowStatus.setDistrictName("District Name");
        actualBeneficiaryFlowStatus.setDoctorFlag((short) 1);
        actualBeneficiaryFlowStatus.setFatherName("Father Name");
        actualBeneficiaryFlowStatus.setFirstName("Jane");
        actualBeneficiaryFlowStatus.setGenderID((short) 1);
        actualBeneficiaryFlowStatus.setGenderName("Gender Name");
        I_bendemographics i_bendemographics = new I_bendemographics();
        i_bendemographics.setDistrictBranchID(1);
        i_bendemographics.setDistrictBranchName("janedoe/featurebranch");
        i_bendemographics.setDistrictID(1);
        i_bendemographics.setDistrictName("District Name");
        i_bendemographics.setServicePointID(1);
        i_bendemographics.setServicePointName("Service Point Name");
        actualBeneficiaryFlowStatus.setI_bendemographics(i_bendemographics);
        actualBeneficiaryFlowStatus.setIsCaseSheetdownloaded(true);
        actualBeneficiaryFlowStatus.setIsTMVisitDone(true);
        actualBeneficiaryFlowStatus.setLabIteration((short) 1);
        actualBeneficiaryFlowStatus.setLab_technician_flag((short) 1);
        actualBeneficiaryFlowStatus.setLastName("Doe");
        GenderMaster m_gender = new GenderMaster();
        m_gender.setDeleted(true);
        m_gender.setGenderID((short) 1);
        m_gender.setGenderName("Gender Name");
        actualBeneficiaryFlowStatus.setM_gender(m_gender);
        actualBeneficiaryFlowStatus.setModified_by("Jan 1, 2020 9:00am GMT+0100");
        Timestamp modified_date = mock(Timestamp.class);
        actualBeneficiaryFlowStatus.setModified_date(modified_date);
        actualBeneficiaryFlowStatus.setNurseFlag((short) 1);
        actualBeneficiaryFlowStatus.setOncologist_flag((short) 1);
        actualBeneficiaryFlowStatus.setParkingPlaceID(1);
        actualBeneficiaryFlowStatus.setPassToNurse(true);
        actualBeneficiaryFlowStatus.setPharmacist_flag((short) 1);
        actualBeneficiaryFlowStatus.setPreferredPhoneNum("6625550144");
        actualBeneficiaryFlowStatus.setProcessed("Processed");
        actualBeneficiaryFlowStatus.setProviderServiceMapID(1);
        actualBeneficiaryFlowStatus.setProviderServiceMapId(1);
        actualBeneficiaryFlowStatus.setRadiologist_flag((short) 1);
        actualBeneficiaryFlowStatus.setReferredVisitCode(1L);
        Timestamp registrationDate = mock(Timestamp.class);
        actualBeneficiaryFlowStatus.setRegistrationDate(registrationDate);
        actualBeneficiaryFlowStatus.setReservedForChange("Reserved For Change");
        Timestamp serviceDate = mock(Timestamp.class);
        actualBeneficiaryFlowStatus.setServiceDate(serviceDate);
        actualBeneficiaryFlowStatus.setServicePointID(1);
        actualBeneficiaryFlowStatus.setServicePointName("Service Point Name");
        actualBeneficiaryFlowStatus.setSpecialist_flag((short) 1);
        actualBeneficiaryFlowStatus.setSpouseName("Spouse Name");
        actualBeneficiaryFlowStatus.setSyncedBy("Synced By");
        Timestamp syncedDate = mock(Timestamp.class);
        actualBeneficiaryFlowStatus.setSyncedDate(syncedDate);
        actualBeneficiaryFlowStatus.setVanID(1);
        actualBeneficiaryFlowStatus.setVanNo("Van No");
        actualBeneficiaryFlowStatus.setVanSerialNo(1L);
        actualBeneficiaryFlowStatus.setVehicalNo("Vehical No");
        actualBeneficiaryFlowStatus.setVillageID(1);
        actualBeneficiaryFlowStatus.setVillageName("Village Name");
        actualBeneficiaryFlowStatus.setVisitCategory("Visit Category");
        actualBeneficiaryFlowStatus.setVisitCode(1L);
        Timestamp visitDate = mock(Timestamp.class);
        actualBeneficiaryFlowStatus.setVisitDate(visitDate);
        actualBeneficiaryFlowStatus.setVisitReason("Just cause");
        actualBeneficiaryFlowStatus.setVisitSession(1);
        actualBeneficiaryFlowStatus.setdOB(mock(Timestamp.class));
        actualBeneficiaryFlowStatus.settCRequestDate(mock(Timestamp.class));
        actualBeneficiaryFlowStatus.settCSpecialistUserID(1);
        actualBeneficiaryFlowStatus.settC_SpecialistLabFlag((short) 1);
        String actualAge = actualBeneficiaryFlowStatus.getAge();
        Integer actualAgeVal = actualBeneficiaryFlowStatus.getAgeVal();
        String actualAgentId = actualBeneficiaryFlowStatus.getAgentId();
        String actualAuth = actualBeneficiaryFlowStatus.getAuth();
        Boolean actualBenArrivedFlag = actualBeneficiaryFlowStatus.getBenArrivedFlag();
        Long actualBenFlowID = actualBeneficiaryFlowStatus.getBenFlowID();
        String actualBenImage = actualBeneficiaryFlowStatus.getBenImage();
        String actualBenName = actualBeneficiaryFlowStatus.getBenName();
        List<BenPhoneMaps> actualBenPhoneMaps = actualBeneficiaryFlowStatus.getBenPhoneMaps();
        Long actualBenVisitCode = actualBeneficiaryFlowStatus.getBenVisitCode();
        Timestamp actualBenVisitDate = actualBeneficiaryFlowStatus.getBenVisitDate();
        Long actualBenVisitID = actualBeneficiaryFlowStatus.getBenVisitID();
        Short actualBenVisitNo = actualBeneficiaryFlowStatus.getBenVisitNo();
        Integer actualBen_age_val = actualBeneficiaryFlowStatus.getBen_age_val();
        Long actualBeneficiaryID = actualBeneficiaryFlowStatus.getBeneficiaryID();
        String actualBeneficiaryName = actualBeneficiaryFlowStatus.getBeneficiaryName();
        Long actualBeneficiaryRegID = actualBeneficiaryFlowStatus.getBeneficiaryRegID();
        String actualBloodGroup = actualBeneficiaryFlowStatus.getBloodGroup();
        Integer actualConsultantID = actualBeneficiaryFlowStatus.getConsultantID();
        String actualConsultantName = actualBeneficiaryFlowStatus.getConsultantName();
        Timestamp actualConsultationDate = actualBeneficiaryFlowStatus.getConsultationDate();
        String actualCreatedBy = actualBeneficiaryFlowStatus.getCreatedBy();
        Timestamp actualCreatedDate = actualBeneficiaryFlowStatus.getCreatedDate();
        Boolean actualDeleted = actualBeneficiaryFlowStatus.getDeleted();
        Integer actualDistrictID = actualBeneficiaryFlowStatus.getDistrictID();
        String actualDistrictName = actualBeneficiaryFlowStatus.getDistrictName();
        Short actualDoctorFlag = actualBeneficiaryFlowStatus.getDoctorFlag();
        String actualFatherName = actualBeneficiaryFlowStatus.getFatherName();
        String actualFirstName = actualBeneficiaryFlowStatus.getFirstName();
        Short actualGenderID = actualBeneficiaryFlowStatus.getGenderID();
        String actualGenderName = actualBeneficiaryFlowStatus.getGenderName();
        I_bendemographics actualI_bendemographics = actualBeneficiaryFlowStatus.getI_bendemographics();
        Boolean actualIsCaseSheetdownloaded = actualBeneficiaryFlowStatus.getIsCaseSheetdownloaded();
        Boolean actualIsTMVisitDone = actualBeneficiaryFlowStatus.getIsTMVisitDone();
        Short actualLabIteration = actualBeneficiaryFlowStatus.getLabIteration();
        Short actualLab_technician_flag = actualBeneficiaryFlowStatus.getLab_technician_flag();
        String actualLastName = actualBeneficiaryFlowStatus.getLastName();
        GenderMaster actualM_gender = actualBeneficiaryFlowStatus.getM_gender();
        String actualModified_by = actualBeneficiaryFlowStatus.getModified_by();
        Timestamp actualModified_date = actualBeneficiaryFlowStatus.getModified_date();
        Short actualNurseFlag = actualBeneficiaryFlowStatus.getNurseFlag();
        Short actualOncologist_flag = actualBeneficiaryFlowStatus.getOncologist_flag();
        Integer actualParkingPlaceID = actualBeneficiaryFlowStatus.getParkingPlaceID();
        Boolean actualPassToNurse = actualBeneficiaryFlowStatus.getPassToNurse();
        Short actualPharmacist_flag = actualBeneficiaryFlowStatus.getPharmacist_flag();
        String actualPreferredPhoneNum = actualBeneficiaryFlowStatus.getPreferredPhoneNum();
        String actualProcessed = actualBeneficiaryFlowStatus.getProcessed();
        Integer actualProviderServiceMapID = actualBeneficiaryFlowStatus.getProviderServiceMapID();
        Integer actualProviderServiceMapId = actualBeneficiaryFlowStatus.getProviderServiceMapId();
        Short actualRadiologist_flag = actualBeneficiaryFlowStatus.getRadiologist_flag();
        Long actualReferredVisitCode = actualBeneficiaryFlowStatus.getReferredVisitCode();
        Timestamp actualRegistrationDate = actualBeneficiaryFlowStatus.getRegistrationDate();
        String actualReservedForChange = actualBeneficiaryFlowStatus.getReservedForChange();
        Timestamp actualServiceDate = actualBeneficiaryFlowStatus.getServiceDate();
        Integer actualServicePointID = actualBeneficiaryFlowStatus.getServicePointID();
        String actualServicePointName = actualBeneficiaryFlowStatus.getServicePointName();
        Short actualSpecialist_flag = actualBeneficiaryFlowStatus.getSpecialist_flag();
        String actualSpouseName = actualBeneficiaryFlowStatus.getSpouseName();
        String actualSyncedBy = actualBeneficiaryFlowStatus.getSyncedBy();
        Timestamp actualSyncedDate = actualBeneficiaryFlowStatus.getSyncedDate();
        Integer actualVanID = actualBeneficiaryFlowStatus.getVanID();
        String actualVanNo = actualBeneficiaryFlowStatus.getVanNo();
        Long actualVanSerialNo = actualBeneficiaryFlowStatus.getVanSerialNo();
        String actualVehicalNo = actualBeneficiaryFlowStatus.getVehicalNo();
        Integer actualVillageID = actualBeneficiaryFlowStatus.getVillageID();
        String actualVillageName = actualBeneficiaryFlowStatus.getVillageName();
        String actualVisitCategory = actualBeneficiaryFlowStatus.getVisitCategory();
        Long actualVisitCode = actualBeneficiaryFlowStatus.getVisitCode();
        Timestamp actualVisitDate = actualBeneficiaryFlowStatus.getVisitDate();
        String actualVisitReason = actualBeneficiaryFlowStatus.getVisitReason();
        Integer actualVisitSession = actualBeneficiaryFlowStatus.getVisitSession();

        // Assert that nothing has changed
        assertEquals("42", actualAgentId);
        assertEquals("6625550144", actualPreferredPhoneNum);
        assertEquals("Age", actualAge);
        assertEquals("Auth", actualAuth);
        assertEquals("Ben Image", actualBenImage);
        assertEquals("Ben Name", actualBenName);
        assertEquals("Beneficiary Name", actualBeneficiaryName);
        assertEquals("Blood Group", actualBloodGroup);
        assertEquals("Consultant Name", actualConsultantName);
        assertEquals("District Name", actualDistrictName);
        assertEquals("Doe", actualLastName);
        assertEquals("Father Name", actualFatherName);
        assertEquals("Gender Name", actualGenderName);
        assertEquals("Jan 1, 2020 8:00am GMT+0100", actualCreatedBy);
        assertEquals("Jan 1, 2020 9:00am GMT+0100", actualModified_by);
        assertEquals("Jane", actualFirstName);
        assertEquals("Just cause", actualVisitReason);
        assertEquals("Processed", actualProcessed);
        assertEquals("Reserved For Change", actualReservedForChange);
        assertEquals("Service Point Name", actualServicePointName);
        assertEquals("Spouse Name", actualSpouseName);
        assertEquals("Synced By", actualSyncedBy);
        assertEquals("Van No", actualVanNo);
        assertEquals("Vehical No", actualVehicalNo);
        assertEquals("Village Name", actualVillageName);
        assertEquals("Visit Category", actualVisitCategory);
        assertEquals(1, actualConsultantID.intValue());
        assertEquals(1, actualDistrictID.intValue());
        assertEquals(1, actualParkingPlaceID.intValue());
        assertEquals(1, actualProviderServiceMapID.intValue());
        assertEquals(1, actualProviderServiceMapId.intValue());
        assertEquals(1, actualServicePointID.intValue());
        assertEquals(1, actualVanID.intValue());
        assertEquals(1, actualVillageID.intValue());
        assertEquals(1, actualVisitSession.intValue());
        assertEquals(1L, actualBenFlowID.longValue());
        assertEquals(1L, actualBenVisitCode.longValue());
        assertEquals(1L, actualBenVisitID.longValue());
        assertEquals(1L, actualBeneficiaryID.longValue());
        assertEquals(1L, actualBeneficiaryRegID.longValue());
        assertEquals(1L, actualReferredVisitCode.longValue());
        assertEquals(1L, actualVanSerialNo.longValue());
        assertEquals(1L, actualVisitCode.longValue());
        assertEquals((short) 1, actualBenVisitNo.shortValue());
        assertEquals((short) 1, actualDoctorFlag.shortValue());
        assertEquals((short) 1, actualGenderID.shortValue());
        assertEquals((short) 1, actualLabIteration.shortValue());
        assertEquals((short) 1, actualLab_technician_flag.shortValue());
        assertEquals((short) 1, actualNurseFlag.shortValue());
        assertEquals((short) 1, actualOncologist_flag.shortValue());
        assertEquals((short) 1, actualPharmacist_flag.shortValue());
        assertEquals((short) 1, actualRadiologist_flag.shortValue());
        assertEquals((short) 1, actualSpecialist_flag.shortValue());
        assertEquals(42, actualAgeVal.intValue());
        assertEquals(42, actualBen_age_val.intValue());
        assertTrue(actualBenArrivedFlag);
        assertTrue(actualDeleted);
        assertTrue(actualIsCaseSheetdownloaded);
        assertTrue(actualIsTMVisitDone);
        assertTrue(actualPassToNurse);
        assertSame(i_bendemographics, actualI_bendemographics);
        assertSame(m_gender, actualM_gender);
        assertSame(benPhoneMaps, actualBenPhoneMaps);
        assertSame(benVisitDate, actualBenVisitDate);
        assertSame(consultationDate, actualConsultationDate);
        assertSame(createdDate, actualCreatedDate);
        assertSame(modified_date, actualModified_date);
        assertSame(registrationDate, actualRegistrationDate);
        assertSame(serviceDate, actualServiceDate);
        assertSame(syncedDate, actualSyncedDate);
        assertSame(visitDate, actualVisitDate);
    }

    @Test
    void testGettersAndSetters2() {
        // Arrange and Act
        BeneficiaryFlowStatus actualBeneficiaryFlowStatus = new BeneficiaryFlowStatus(1L, 1L, 1L, mock(Timestamp.class),
                (short) 1, "Just cause", "Visit Category");
        actualBeneficiaryFlowStatus.setAge("Age");
        actualBeneficiaryFlowStatus.setAgeVal(42);
        actualBeneficiaryFlowStatus.setAgentId("42");
        actualBeneficiaryFlowStatus.setAuth("Auth");
        actualBeneficiaryFlowStatus.setBenArrivedFlag(true);
        actualBeneficiaryFlowStatus.setBenFlowID(1L);
        actualBeneficiaryFlowStatus.setBenImage("Ben Image");
        actualBeneficiaryFlowStatus.setBenName("Ben Name");
        ArrayList<BenPhoneMaps> benPhoneMaps = new ArrayList<>();
        actualBeneficiaryFlowStatus.setBenPhoneMaps(benPhoneMaps);
        actualBeneficiaryFlowStatus.setBenVisitCode(1L);
        Timestamp benVisitDate = mock(Timestamp.class);
        actualBeneficiaryFlowStatus.setBenVisitDate(benVisitDate);
        actualBeneficiaryFlowStatus.setBenVisitID(1L);
        actualBeneficiaryFlowStatus.setBenVisitNo((short) 1);
        actualBeneficiaryFlowStatus.setBen_age_val(42);
        actualBeneficiaryFlowStatus.setBeneficiaryID(1L);
        actualBeneficiaryFlowStatus.setBeneficiaryName("Beneficiary Name");
        actualBeneficiaryFlowStatus.setBeneficiaryRegID(1L);
        actualBeneficiaryFlowStatus.setBloodGroup("Blood Group");
        actualBeneficiaryFlowStatus.setConsultantID(1);
        actualBeneficiaryFlowStatus.setConsultantName("Consultant Name");
        Timestamp consultationDate = mock(Timestamp.class);
        actualBeneficiaryFlowStatus.setConsultationDate(consultationDate);
        actualBeneficiaryFlowStatus.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        Timestamp createdDate = mock(Timestamp.class);
        actualBeneficiaryFlowStatus.setCreatedDate(createdDate);
        actualBeneficiaryFlowStatus.setDeleted(true);
        actualBeneficiaryFlowStatus.setDistrictID(1);
        actualBeneficiaryFlowStatus.setDistrictName("District Name");
        actualBeneficiaryFlowStatus.setDoctorFlag((short) 1);
        actualBeneficiaryFlowStatus.setFatherName("Father Name");
        actualBeneficiaryFlowStatus.setFirstName("Jane");
        actualBeneficiaryFlowStatus.setGenderID((short) 1);
        actualBeneficiaryFlowStatus.setGenderName("Gender Name");
        I_bendemographics i_bendemographics = new I_bendemographics();
        i_bendemographics.setDistrictBranchID(1);
        i_bendemographics.setDistrictBranchName("janedoe/featurebranch");
        i_bendemographics.setDistrictID(1);
        i_bendemographics.setDistrictName("District Name");
        i_bendemographics.setServicePointID(1);
        i_bendemographics.setServicePointName("Service Point Name");
        actualBeneficiaryFlowStatus.setI_bendemographics(i_bendemographics);
        actualBeneficiaryFlowStatus.setIsCaseSheetdownloaded(true);
        actualBeneficiaryFlowStatus.setIsTMVisitDone(true);
        actualBeneficiaryFlowStatus.setLabIteration((short) 1);
        actualBeneficiaryFlowStatus.setLab_technician_flag((short) 1);
        actualBeneficiaryFlowStatus.setLastName("Doe");
        GenderMaster m_gender = new GenderMaster();
        m_gender.setDeleted(true);
        m_gender.setGenderID((short) 1);
        m_gender.setGenderName("Gender Name");
        actualBeneficiaryFlowStatus.setM_gender(m_gender);
        actualBeneficiaryFlowStatus.setModified_by("Jan 1, 2020 9:00am GMT+0100");
        Timestamp modified_date = mock(Timestamp.class);
        actualBeneficiaryFlowStatus.setModified_date(modified_date);
        actualBeneficiaryFlowStatus.setNurseFlag((short) 1);
        actualBeneficiaryFlowStatus.setOncologist_flag((short) 1);
        actualBeneficiaryFlowStatus.setParkingPlaceID(1);
        actualBeneficiaryFlowStatus.setPassToNurse(true);
        actualBeneficiaryFlowStatus.setPharmacist_flag((short) 1);
        actualBeneficiaryFlowStatus.setPreferredPhoneNum("6625550144");
        actualBeneficiaryFlowStatus.setProcessed("Processed");
        actualBeneficiaryFlowStatus.setProviderServiceMapID(1);
        actualBeneficiaryFlowStatus.setProviderServiceMapId(1);
        actualBeneficiaryFlowStatus.setRadiologist_flag((short) 1);
        actualBeneficiaryFlowStatus.setReferredVisitCode(1L);
        Timestamp registrationDate = mock(Timestamp.class);
        actualBeneficiaryFlowStatus.setRegistrationDate(registrationDate);
        actualBeneficiaryFlowStatus.setReservedForChange("Reserved For Change");
        Timestamp serviceDate = mock(Timestamp.class);
        actualBeneficiaryFlowStatus.setServiceDate(serviceDate);
        actualBeneficiaryFlowStatus.setServicePointID(1);
        actualBeneficiaryFlowStatus.setServicePointName("Service Point Name");
        actualBeneficiaryFlowStatus.setSpecialist_flag((short) 1);
        actualBeneficiaryFlowStatus.setSpouseName("Spouse Name");
        actualBeneficiaryFlowStatus.setSyncedBy("Synced By");
        Timestamp syncedDate = mock(Timestamp.class);
        actualBeneficiaryFlowStatus.setSyncedDate(syncedDate);
        actualBeneficiaryFlowStatus.setVanID(1);
        actualBeneficiaryFlowStatus.setVanNo("Van No");
        actualBeneficiaryFlowStatus.setVanSerialNo(1L);
        actualBeneficiaryFlowStatus.setVehicalNo("Vehical No");
        actualBeneficiaryFlowStatus.setVillageID(1);
        actualBeneficiaryFlowStatus.setVillageName("Village Name");
        actualBeneficiaryFlowStatus.setVisitCategory("Visit Category");
        actualBeneficiaryFlowStatus.setVisitCode(1L);
        Timestamp visitDate = mock(Timestamp.class);
        actualBeneficiaryFlowStatus.setVisitDate(visitDate);
        actualBeneficiaryFlowStatus.setVisitReason("Just cause");
        actualBeneficiaryFlowStatus.setVisitSession(1);
        actualBeneficiaryFlowStatus.setdOB(mock(Timestamp.class));
        actualBeneficiaryFlowStatus.settCRequestDate(mock(Timestamp.class));
        actualBeneficiaryFlowStatus.settCSpecialistUserID(1);
        actualBeneficiaryFlowStatus.settC_SpecialistLabFlag((short) 1);
        String actualAge = actualBeneficiaryFlowStatus.getAge();
        Integer actualAgeVal = actualBeneficiaryFlowStatus.getAgeVal();
        String actualAgentId = actualBeneficiaryFlowStatus.getAgentId();
        String actualAuth = actualBeneficiaryFlowStatus.getAuth();
        Boolean actualBenArrivedFlag = actualBeneficiaryFlowStatus.getBenArrivedFlag();
        Long actualBenFlowID = actualBeneficiaryFlowStatus.getBenFlowID();
        String actualBenImage = actualBeneficiaryFlowStatus.getBenImage();
        String actualBenName = actualBeneficiaryFlowStatus.getBenName();
        List<BenPhoneMaps> actualBenPhoneMaps = actualBeneficiaryFlowStatus.getBenPhoneMaps();
        Long actualBenVisitCode = actualBeneficiaryFlowStatus.getBenVisitCode();
        Timestamp actualBenVisitDate = actualBeneficiaryFlowStatus.getBenVisitDate();
        Long actualBenVisitID = actualBeneficiaryFlowStatus.getBenVisitID();
        Short actualBenVisitNo = actualBeneficiaryFlowStatus.getBenVisitNo();
        Integer actualBen_age_val = actualBeneficiaryFlowStatus.getBen_age_val();
        Long actualBeneficiaryID = actualBeneficiaryFlowStatus.getBeneficiaryID();
        String actualBeneficiaryName = actualBeneficiaryFlowStatus.getBeneficiaryName();
        Long actualBeneficiaryRegID = actualBeneficiaryFlowStatus.getBeneficiaryRegID();
        String actualBloodGroup = actualBeneficiaryFlowStatus.getBloodGroup();
        Integer actualConsultantID = actualBeneficiaryFlowStatus.getConsultantID();
        String actualConsultantName = actualBeneficiaryFlowStatus.getConsultantName();
        Timestamp actualConsultationDate = actualBeneficiaryFlowStatus.getConsultationDate();
        String actualCreatedBy = actualBeneficiaryFlowStatus.getCreatedBy();
        Timestamp actualCreatedDate = actualBeneficiaryFlowStatus.getCreatedDate();
        Boolean actualDeleted = actualBeneficiaryFlowStatus.getDeleted();
        Integer actualDistrictID = actualBeneficiaryFlowStatus.getDistrictID();
        String actualDistrictName = actualBeneficiaryFlowStatus.getDistrictName();
        Short actualDoctorFlag = actualBeneficiaryFlowStatus.getDoctorFlag();
        String actualFatherName = actualBeneficiaryFlowStatus.getFatherName();
        String actualFirstName = actualBeneficiaryFlowStatus.getFirstName();
        Short actualGenderID = actualBeneficiaryFlowStatus.getGenderID();
        String actualGenderName = actualBeneficiaryFlowStatus.getGenderName();
        I_bendemographics actualI_bendemographics = actualBeneficiaryFlowStatus.getI_bendemographics();
        Boolean actualIsCaseSheetdownloaded = actualBeneficiaryFlowStatus.getIsCaseSheetdownloaded();
        Boolean actualIsTMVisitDone = actualBeneficiaryFlowStatus.getIsTMVisitDone();
        Short actualLabIteration = actualBeneficiaryFlowStatus.getLabIteration();
        Short actualLab_technician_flag = actualBeneficiaryFlowStatus.getLab_technician_flag();
        String actualLastName = actualBeneficiaryFlowStatus.getLastName();
        GenderMaster actualM_gender = actualBeneficiaryFlowStatus.getM_gender();
        String actualModified_by = actualBeneficiaryFlowStatus.getModified_by();
        Timestamp actualModified_date = actualBeneficiaryFlowStatus.getModified_date();
        Short actualNurseFlag = actualBeneficiaryFlowStatus.getNurseFlag();
        Short actualOncologist_flag = actualBeneficiaryFlowStatus.getOncologist_flag();
        Integer actualParkingPlaceID = actualBeneficiaryFlowStatus.getParkingPlaceID();
        Boolean actualPassToNurse = actualBeneficiaryFlowStatus.getPassToNurse();
        Short actualPharmacist_flag = actualBeneficiaryFlowStatus.getPharmacist_flag();
        String actualPreferredPhoneNum = actualBeneficiaryFlowStatus.getPreferredPhoneNum();
        String actualProcessed = actualBeneficiaryFlowStatus.getProcessed();
        Integer actualProviderServiceMapID = actualBeneficiaryFlowStatus.getProviderServiceMapID();
        Integer actualProviderServiceMapId = actualBeneficiaryFlowStatus.getProviderServiceMapId();
        Short actualRadiologist_flag = actualBeneficiaryFlowStatus.getRadiologist_flag();
        Long actualReferredVisitCode = actualBeneficiaryFlowStatus.getReferredVisitCode();
        Timestamp actualRegistrationDate = actualBeneficiaryFlowStatus.getRegistrationDate();
        String actualReservedForChange = actualBeneficiaryFlowStatus.getReservedForChange();
        Timestamp actualServiceDate = actualBeneficiaryFlowStatus.getServiceDate();
        Integer actualServicePointID = actualBeneficiaryFlowStatus.getServicePointID();
        String actualServicePointName = actualBeneficiaryFlowStatus.getServicePointName();
        Short actualSpecialist_flag = actualBeneficiaryFlowStatus.getSpecialist_flag();
        String actualSpouseName = actualBeneficiaryFlowStatus.getSpouseName();
        String actualSyncedBy = actualBeneficiaryFlowStatus.getSyncedBy();
        Timestamp actualSyncedDate = actualBeneficiaryFlowStatus.getSyncedDate();
        Integer actualVanID = actualBeneficiaryFlowStatus.getVanID();
        String actualVanNo = actualBeneficiaryFlowStatus.getVanNo();
        Long actualVanSerialNo = actualBeneficiaryFlowStatus.getVanSerialNo();
        String actualVehicalNo = actualBeneficiaryFlowStatus.getVehicalNo();
        Integer actualVillageID = actualBeneficiaryFlowStatus.getVillageID();
        String actualVillageName = actualBeneficiaryFlowStatus.getVillageName();
        String actualVisitCategory = actualBeneficiaryFlowStatus.getVisitCategory();
        Long actualVisitCode = actualBeneficiaryFlowStatus.getVisitCode();
        Timestamp actualVisitDate = actualBeneficiaryFlowStatus.getVisitDate();
        String actualVisitReason = actualBeneficiaryFlowStatus.getVisitReason();
        Integer actualVisitSession = actualBeneficiaryFlowStatus.getVisitSession();

        // Assert that nothing has changed
        assertEquals("42", actualAgentId);
        assertEquals("6625550144", actualPreferredPhoneNum);
        assertEquals("Age", actualAge);
        assertEquals("Auth", actualAuth);
        assertEquals("Ben Image", actualBenImage);
        assertEquals("Ben Name", actualBenName);
        assertEquals("Beneficiary Name", actualBeneficiaryName);
        assertEquals("Blood Group", actualBloodGroup);
        assertEquals("Consultant Name", actualConsultantName);
        assertEquals("District Name", actualDistrictName);
        assertEquals("Doe", actualLastName);
        assertEquals("Father Name", actualFatherName);
        assertEquals("Gender Name", actualGenderName);
        assertEquals("Jan 1, 2020 8:00am GMT+0100", actualCreatedBy);
        assertEquals("Jan 1, 2020 9:00am GMT+0100", actualModified_by);
        assertEquals("Jane", actualFirstName);
        assertEquals("Just cause", actualVisitReason);
        assertEquals("Processed", actualProcessed);
        assertEquals("Reserved For Change", actualReservedForChange);
        assertEquals("Service Point Name", actualServicePointName);
        assertEquals("Spouse Name", actualSpouseName);
        assertEquals("Synced By", actualSyncedBy);
        assertEquals("Van No", actualVanNo);
        assertEquals("Vehical No", actualVehicalNo);
        assertEquals("Village Name", actualVillageName);
        assertEquals("Visit Category", actualVisitCategory);
        assertEquals(1, actualConsultantID.intValue());
        assertEquals(1, actualDistrictID.intValue());
        assertEquals(1, actualParkingPlaceID.intValue());
        assertEquals(1, actualProviderServiceMapID.intValue());
        assertEquals(1, actualProviderServiceMapId.intValue());
        assertEquals(1, actualServicePointID.intValue());
        assertEquals(1, actualVanID.intValue());
        assertEquals(1, actualVillageID.intValue());
        assertEquals(1, actualVisitSession.intValue());
        assertEquals(1L, actualBenFlowID.longValue());
        assertEquals(1L, actualBenVisitCode.longValue());
        assertEquals(1L, actualBenVisitID.longValue());
        assertEquals(1L, actualBeneficiaryID.longValue());
        assertEquals(1L, actualBeneficiaryRegID.longValue());
        assertEquals(1L, actualReferredVisitCode.longValue());
        assertEquals(1L, actualVanSerialNo.longValue());
        assertEquals(1L, actualVisitCode.longValue());
        assertEquals((short) 1, actualBenVisitNo.shortValue());
        assertEquals((short) 1, actualDoctorFlag.shortValue());
        assertEquals((short) 1, actualGenderID.shortValue());
        assertEquals((short) 1, actualLabIteration.shortValue());
        assertEquals((short) 1, actualLab_technician_flag.shortValue());
        assertEquals((short) 1, actualNurseFlag.shortValue());
        assertEquals((short) 1, actualOncologist_flag.shortValue());
        assertEquals((short) 1, actualPharmacist_flag.shortValue());
        assertEquals((short) 1, actualRadiologist_flag.shortValue());
        assertEquals((short) 1, actualSpecialist_flag.shortValue());
        assertEquals(42, actualAgeVal.intValue());
        assertEquals(42, actualBen_age_val.intValue());
        assertTrue(actualBenArrivedFlag);
        assertTrue(actualDeleted);
        assertTrue(actualIsCaseSheetdownloaded);
        assertTrue(actualIsTMVisitDone);
        assertTrue(actualPassToNurse);
        assertSame(i_bendemographics, actualI_bendemographics);
        assertSame(m_gender, actualM_gender);
        assertSame(benPhoneMaps, actualBenPhoneMaps);
        assertSame(benVisitDate, actualBenVisitDate);
        assertSame(consultationDate, actualConsultationDate);
        assertSame(createdDate, actualCreatedDate);
        assertSame(modified_date, actualModified_date);
        assertSame(registrationDate, actualRegistrationDate);
        assertSame(serviceDate, actualServiceDate);
        assertSame(syncedDate, actualSyncedDate);
        assertSame(visitDate, actualVisitDate);
    }

    @Test
    void testGettersAndSetters3() {
        // Arrange and Act
        BeneficiaryFlowStatus actualBeneficiaryFlowStatus = new BeneficiaryFlowStatus(1L, 1L, mock(Timestamp.class),
                "Ben Name", "Age", 42, (short) 1, "Gender Name", "Village Name", "District Name", 1L, "Service Point",
                "Just cause", "Visit Category", 1L, mock(Timestamp.class), mock(Timestamp.class), 1L, mock(Timestamp.class));
        actualBeneficiaryFlowStatus.setAge("Age");
        actualBeneficiaryFlowStatus.setAgeVal(42);
        actualBeneficiaryFlowStatus.setAgentId("42");
        actualBeneficiaryFlowStatus.setAuth("Auth");
        actualBeneficiaryFlowStatus.setBenArrivedFlag(true);
        actualBeneficiaryFlowStatus.setBenFlowID(1L);
        actualBeneficiaryFlowStatus.setBenImage("Ben Image");
        actualBeneficiaryFlowStatus.setBenName("Ben Name");
        ArrayList<BenPhoneMaps> benPhoneMaps = new ArrayList<>();
        actualBeneficiaryFlowStatus.setBenPhoneMaps(benPhoneMaps);
        actualBeneficiaryFlowStatus.setBenVisitCode(1L);
        Timestamp benVisitDate = mock(Timestamp.class);
        actualBeneficiaryFlowStatus.setBenVisitDate(benVisitDate);
        actualBeneficiaryFlowStatus.setBenVisitID(1L);
        actualBeneficiaryFlowStatus.setBenVisitNo((short) 1);
        actualBeneficiaryFlowStatus.setBen_age_val(42);
        actualBeneficiaryFlowStatus.setBeneficiaryID(1L);
        actualBeneficiaryFlowStatus.setBeneficiaryName("Beneficiary Name");
        actualBeneficiaryFlowStatus.setBeneficiaryRegID(1L);
        actualBeneficiaryFlowStatus.setBloodGroup("Blood Group");
        actualBeneficiaryFlowStatus.setConsultantID(1);
        actualBeneficiaryFlowStatus.setConsultantName("Consultant Name");
        Timestamp consultationDate = mock(Timestamp.class);
        actualBeneficiaryFlowStatus.setConsultationDate(consultationDate);
        actualBeneficiaryFlowStatus.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        Timestamp createdDate = mock(Timestamp.class);
        actualBeneficiaryFlowStatus.setCreatedDate(createdDate);
        actualBeneficiaryFlowStatus.setDeleted(true);
        actualBeneficiaryFlowStatus.setDistrictID(1);
        actualBeneficiaryFlowStatus.setDistrictName("District Name");
        actualBeneficiaryFlowStatus.setDoctorFlag((short) 1);
        actualBeneficiaryFlowStatus.setFatherName("Father Name");
        actualBeneficiaryFlowStatus.setFirstName("Jane");
        actualBeneficiaryFlowStatus.setGenderID((short) 1);
        actualBeneficiaryFlowStatus.setGenderName("Gender Name");
        I_bendemographics i_bendemographics = new I_bendemographics();
        i_bendemographics.setDistrictBranchID(1);
        i_bendemographics.setDistrictBranchName("janedoe/featurebranch");
        i_bendemographics.setDistrictID(1);
        i_bendemographics.setDistrictName("District Name");
        i_bendemographics.setServicePointID(1);
        i_bendemographics.setServicePointName("Service Point Name");
        actualBeneficiaryFlowStatus.setI_bendemographics(i_bendemographics);
        actualBeneficiaryFlowStatus.setIsCaseSheetdownloaded(true);
        actualBeneficiaryFlowStatus.setIsTMVisitDone(true);
        actualBeneficiaryFlowStatus.setLabIteration((short) 1);
        actualBeneficiaryFlowStatus.setLab_technician_flag((short) 1);
        actualBeneficiaryFlowStatus.setLastName("Doe");
        GenderMaster m_gender = new GenderMaster();
        m_gender.setDeleted(true);
        m_gender.setGenderID((short) 1);
        m_gender.setGenderName("Gender Name");
        actualBeneficiaryFlowStatus.setM_gender(m_gender);
        actualBeneficiaryFlowStatus.setModified_by("Jan 1, 2020 9:00am GMT+0100");
        Timestamp modified_date = mock(Timestamp.class);
        actualBeneficiaryFlowStatus.setModified_date(modified_date);
        actualBeneficiaryFlowStatus.setNurseFlag((short) 1);
        actualBeneficiaryFlowStatus.setOncologist_flag((short) 1);
        actualBeneficiaryFlowStatus.setParkingPlaceID(1);
        actualBeneficiaryFlowStatus.setPassToNurse(true);
        actualBeneficiaryFlowStatus.setPharmacist_flag((short) 1);
        actualBeneficiaryFlowStatus.setPreferredPhoneNum("6625550144");
        actualBeneficiaryFlowStatus.setProcessed("Processed");
        actualBeneficiaryFlowStatus.setProviderServiceMapID(1);
        actualBeneficiaryFlowStatus.setProviderServiceMapId(1);
        actualBeneficiaryFlowStatus.setRadiologist_flag((short) 1);
        actualBeneficiaryFlowStatus.setReferredVisitCode(1L);
        Timestamp registrationDate = mock(Timestamp.class);
        actualBeneficiaryFlowStatus.setRegistrationDate(registrationDate);
        actualBeneficiaryFlowStatus.setReservedForChange("Reserved For Change");
        Timestamp serviceDate = mock(Timestamp.class);
        actualBeneficiaryFlowStatus.setServiceDate(serviceDate);
        actualBeneficiaryFlowStatus.setServicePointID(1);
        actualBeneficiaryFlowStatus.setServicePointName("Service Point Name");
        actualBeneficiaryFlowStatus.setSpecialist_flag((short) 1);
        actualBeneficiaryFlowStatus.setSpouseName("Spouse Name");
        actualBeneficiaryFlowStatus.setSyncedBy("Synced By");
        Timestamp syncedDate = mock(Timestamp.class);
        actualBeneficiaryFlowStatus.setSyncedDate(syncedDate);
        actualBeneficiaryFlowStatus.setVanID(1);
        actualBeneficiaryFlowStatus.setVanNo("Van No");
        actualBeneficiaryFlowStatus.setVanSerialNo(1L);
        actualBeneficiaryFlowStatus.setVehicalNo("Vehical No");
        actualBeneficiaryFlowStatus.setVillageID(1);
        actualBeneficiaryFlowStatus.setVillageName("Village Name");
        actualBeneficiaryFlowStatus.setVisitCategory("Visit Category");
        actualBeneficiaryFlowStatus.setVisitCode(1L);
        Timestamp visitDate = mock(Timestamp.class);
        actualBeneficiaryFlowStatus.setVisitDate(visitDate);
        actualBeneficiaryFlowStatus.setVisitReason("Just cause");
        actualBeneficiaryFlowStatus.setVisitSession(1);
        actualBeneficiaryFlowStatus.setdOB(mock(Timestamp.class));
        actualBeneficiaryFlowStatus.settCRequestDate(mock(Timestamp.class));
        actualBeneficiaryFlowStatus.settCSpecialistUserID(1);
        actualBeneficiaryFlowStatus.settC_SpecialistLabFlag((short) 1);
        String actualAge = actualBeneficiaryFlowStatus.getAge();
        Integer actualAgeVal = actualBeneficiaryFlowStatus.getAgeVal();
        String actualAgentId = actualBeneficiaryFlowStatus.getAgentId();
        String actualAuth = actualBeneficiaryFlowStatus.getAuth();
        Boolean actualBenArrivedFlag = actualBeneficiaryFlowStatus.getBenArrivedFlag();
        Long actualBenFlowID = actualBeneficiaryFlowStatus.getBenFlowID();
        String actualBenImage = actualBeneficiaryFlowStatus.getBenImage();
        String actualBenName = actualBeneficiaryFlowStatus.getBenName();
        List<BenPhoneMaps> actualBenPhoneMaps = actualBeneficiaryFlowStatus.getBenPhoneMaps();
        Long actualBenVisitCode = actualBeneficiaryFlowStatus.getBenVisitCode();
        Timestamp actualBenVisitDate = actualBeneficiaryFlowStatus.getBenVisitDate();
        Long actualBenVisitID = actualBeneficiaryFlowStatus.getBenVisitID();
        Short actualBenVisitNo = actualBeneficiaryFlowStatus.getBenVisitNo();
        Integer actualBen_age_val = actualBeneficiaryFlowStatus.getBen_age_val();
        Long actualBeneficiaryID = actualBeneficiaryFlowStatus.getBeneficiaryID();
        String actualBeneficiaryName = actualBeneficiaryFlowStatus.getBeneficiaryName();
        Long actualBeneficiaryRegID = actualBeneficiaryFlowStatus.getBeneficiaryRegID();
        String actualBloodGroup = actualBeneficiaryFlowStatus.getBloodGroup();
        Integer actualConsultantID = actualBeneficiaryFlowStatus.getConsultantID();
        String actualConsultantName = actualBeneficiaryFlowStatus.getConsultantName();
        Timestamp actualConsultationDate = actualBeneficiaryFlowStatus.getConsultationDate();
        String actualCreatedBy = actualBeneficiaryFlowStatus.getCreatedBy();
        Timestamp actualCreatedDate = actualBeneficiaryFlowStatus.getCreatedDate();
        Boolean actualDeleted = actualBeneficiaryFlowStatus.getDeleted();
        Integer actualDistrictID = actualBeneficiaryFlowStatus.getDistrictID();
        String actualDistrictName = actualBeneficiaryFlowStatus.getDistrictName();
        Short actualDoctorFlag = actualBeneficiaryFlowStatus.getDoctorFlag();
        String actualFatherName = actualBeneficiaryFlowStatus.getFatherName();
        String actualFirstName = actualBeneficiaryFlowStatus.getFirstName();
        Short actualGenderID = actualBeneficiaryFlowStatus.getGenderID();
        String actualGenderName = actualBeneficiaryFlowStatus.getGenderName();
        I_bendemographics actualI_bendemographics = actualBeneficiaryFlowStatus.getI_bendemographics();
        Boolean actualIsCaseSheetdownloaded = actualBeneficiaryFlowStatus.getIsCaseSheetdownloaded();
        Boolean actualIsTMVisitDone = actualBeneficiaryFlowStatus.getIsTMVisitDone();
        Short actualLabIteration = actualBeneficiaryFlowStatus.getLabIteration();
        Short actualLab_technician_flag = actualBeneficiaryFlowStatus.getLab_technician_flag();
        String actualLastName = actualBeneficiaryFlowStatus.getLastName();
        GenderMaster actualM_gender = actualBeneficiaryFlowStatus.getM_gender();
        String actualModified_by = actualBeneficiaryFlowStatus.getModified_by();
        Timestamp actualModified_date = actualBeneficiaryFlowStatus.getModified_date();
        Short actualNurseFlag = actualBeneficiaryFlowStatus.getNurseFlag();
        Short actualOncologist_flag = actualBeneficiaryFlowStatus.getOncologist_flag();
        Integer actualParkingPlaceID = actualBeneficiaryFlowStatus.getParkingPlaceID();
        Boolean actualPassToNurse = actualBeneficiaryFlowStatus.getPassToNurse();
        Short actualPharmacist_flag = actualBeneficiaryFlowStatus.getPharmacist_flag();
        String actualPreferredPhoneNum = actualBeneficiaryFlowStatus.getPreferredPhoneNum();
        String actualProcessed = actualBeneficiaryFlowStatus.getProcessed();
        Integer actualProviderServiceMapID = actualBeneficiaryFlowStatus.getProviderServiceMapID();
        Integer actualProviderServiceMapId = actualBeneficiaryFlowStatus.getProviderServiceMapId();
        Short actualRadiologist_flag = actualBeneficiaryFlowStatus.getRadiologist_flag();
        Long actualReferredVisitCode = actualBeneficiaryFlowStatus.getReferredVisitCode();
        Timestamp actualRegistrationDate = actualBeneficiaryFlowStatus.getRegistrationDate();
        String actualReservedForChange = actualBeneficiaryFlowStatus.getReservedForChange();
        Timestamp actualServiceDate = actualBeneficiaryFlowStatus.getServiceDate();
        Integer actualServicePointID = actualBeneficiaryFlowStatus.getServicePointID();
        String actualServicePointName = actualBeneficiaryFlowStatus.getServicePointName();
        Short actualSpecialist_flag = actualBeneficiaryFlowStatus.getSpecialist_flag();
        String actualSpouseName = actualBeneficiaryFlowStatus.getSpouseName();
        String actualSyncedBy = actualBeneficiaryFlowStatus.getSyncedBy();
        Timestamp actualSyncedDate = actualBeneficiaryFlowStatus.getSyncedDate();
        Integer actualVanID = actualBeneficiaryFlowStatus.getVanID();
        String actualVanNo = actualBeneficiaryFlowStatus.getVanNo();
        Long actualVanSerialNo = actualBeneficiaryFlowStatus.getVanSerialNo();
        String actualVehicalNo = actualBeneficiaryFlowStatus.getVehicalNo();
        Integer actualVillageID = actualBeneficiaryFlowStatus.getVillageID();
        String actualVillageName = actualBeneficiaryFlowStatus.getVillageName();
        String actualVisitCategory = actualBeneficiaryFlowStatus.getVisitCategory();
        Long actualVisitCode = actualBeneficiaryFlowStatus.getVisitCode();
        Timestamp actualVisitDate = actualBeneficiaryFlowStatus.getVisitDate();
        String actualVisitReason = actualBeneficiaryFlowStatus.getVisitReason();
        Integer actualVisitSession = actualBeneficiaryFlowStatus.getVisitSession();

        // Assert that nothing has changed
        assertEquals("42", actualAgentId);
        assertEquals("6625550144", actualPreferredPhoneNum);
        assertEquals("Age", actualAge);
        assertEquals("Auth", actualAuth);
        assertEquals("Ben Image", actualBenImage);
        assertEquals("Ben Name", actualBenName);
        assertEquals("Beneficiary Name", actualBeneficiaryName);
        assertEquals("Blood Group", actualBloodGroup);
        assertEquals("Consultant Name", actualConsultantName);
        assertEquals("District Name", actualDistrictName);
        assertEquals("Doe", actualLastName);
        assertEquals("Father Name", actualFatherName);
        assertEquals("Gender Name", actualGenderName);
        assertEquals("Jan 1, 2020 8:00am GMT+0100", actualCreatedBy);
        assertEquals("Jan 1, 2020 9:00am GMT+0100", actualModified_by);
        assertEquals("Jane", actualFirstName);
        assertEquals("Just cause", actualVisitReason);
        assertEquals("Processed", actualProcessed);
        assertEquals("Reserved For Change", actualReservedForChange);
        assertEquals("Service Point Name", actualServicePointName);
        assertEquals("Spouse Name", actualSpouseName);
        assertEquals("Synced By", actualSyncedBy);
        assertEquals("Van No", actualVanNo);
        assertEquals("Vehical No", actualVehicalNo);
        assertEquals("Village Name", actualVillageName);
        assertEquals("Visit Category", actualVisitCategory);
        assertEquals(1, actualConsultantID.intValue());
        assertEquals(1, actualDistrictID.intValue());
        assertEquals(1, actualParkingPlaceID.intValue());
        assertEquals(1, actualProviderServiceMapID.intValue());
        assertEquals(1, actualProviderServiceMapId.intValue());
        assertEquals(1, actualServicePointID.intValue());
        assertEquals(1, actualVanID.intValue());
        assertEquals(1, actualVillageID.intValue());
        assertEquals(1, actualVisitSession.intValue());
        assertEquals(1L, actualBenFlowID.longValue());
        assertEquals(1L, actualBenVisitCode.longValue());
        assertEquals(1L, actualBenVisitID.longValue());
        assertEquals(1L, actualBeneficiaryID.longValue());
        assertEquals(1L, actualBeneficiaryRegID.longValue());
        assertEquals(1L, actualReferredVisitCode.longValue());
        assertEquals(1L, actualVanSerialNo.longValue());
        assertEquals(1L, actualVisitCode.longValue());
        assertEquals((short) 1, actualBenVisitNo.shortValue());
        assertEquals((short) 1, actualDoctorFlag.shortValue());
        assertEquals((short) 1, actualGenderID.shortValue());
        assertEquals((short) 1, actualLabIteration.shortValue());
        assertEquals((short) 1, actualLab_technician_flag.shortValue());
        assertEquals((short) 1, actualNurseFlag.shortValue());
        assertEquals((short) 1, actualOncologist_flag.shortValue());
        assertEquals((short) 1, actualPharmacist_flag.shortValue());
        assertEquals((short) 1, actualRadiologist_flag.shortValue());
        assertEquals((short) 1, actualSpecialist_flag.shortValue());
        assertEquals(42, actualAgeVal.intValue());
        assertEquals(42, actualBen_age_val.intValue());
        assertTrue(actualBenArrivedFlag);
        assertTrue(actualDeleted);
        assertTrue(actualIsCaseSheetdownloaded);
        assertTrue(actualIsTMVisitDone);
        assertTrue(actualPassToNurse);
        assertSame(i_bendemographics, actualI_bendemographics);
        assertSame(m_gender, actualM_gender);
        assertSame(benPhoneMaps, actualBenPhoneMaps);
        assertSame(benVisitDate, actualBenVisitDate);
        assertSame(consultationDate, actualConsultationDate);
        assertSame(createdDate, actualCreatedDate);
        assertSame(modified_date, actualModified_date);
        assertSame(registrationDate, actualRegistrationDate);
        assertSame(serviceDate, actualServiceDate);
        assertSame(syncedDate, actualSyncedDate);
        assertSame(visitDate, actualVisitDate);
    }
}
