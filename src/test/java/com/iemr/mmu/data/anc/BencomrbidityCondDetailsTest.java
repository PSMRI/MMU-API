package com.iemr.mmu.data.anc;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.mock;

import java.sql.Date;
import java.sql.Timestamp;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
@ExtendWith(MockitoExtension.class)
class BencomrbidityCondDetailsTest {
    @Test
    void testGettersAndSetters() {
        // Arrange and Act
        BencomrbidityCondDetails actualBencomrbidityCondDetails = new BencomrbidityCondDetails();
        actualBencomrbidityCondDetails.setBenVisitID(1L);
        actualBencomrbidityCondDetails.setBeneficiaryRegID(1L);
        Date captureDate = mock(Date.class);
        actualBencomrbidityCondDetails.setCaptureDate(captureDate);
        actualBencomrbidityCondDetails.setComorbidCondition("Comorbid Condition");
        actualBencomrbidityCondDetails.setComorbidConditionID((short) 1);
        actualBencomrbidityCondDetails.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        Timestamp createdDate = mock(Timestamp.class);
        actualBencomrbidityCondDetails.setCreatedDate(createdDate);
        Date date = mock(Date.class);
        actualBencomrbidityCondDetails.setDate(date);
        actualBencomrbidityCondDetails.setDeleted(true);
        actualBencomrbidityCondDetails.setID(1L);
        actualBencomrbidityCondDetails.setIsForHistory(true);
        Timestamp lastModDate = mock(Timestamp.class);
        actualBencomrbidityCondDetails.setLastModDate(lastModDate);
        actualBencomrbidityCondDetails.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        actualBencomrbidityCondDetails.setOtherComorbidCondition("Other Comorbid Condition");
        actualBencomrbidityCondDetails.setParkingPlaceID(1);
        actualBencomrbidityCondDetails.setProcessed("Processed");
        actualBencomrbidityCondDetails.setProviderServiceMapID(1);
        actualBencomrbidityCondDetails.setReservedForChange("Reserved For Change");
        actualBencomrbidityCondDetails.setSyncedBy("Synced By");
        Timestamp syncedDate = mock(Timestamp.class);
        actualBencomrbidityCondDetails.setSyncedDate(syncedDate);
        actualBencomrbidityCondDetails.setTimePeriodAgo(1);
        actualBencomrbidityCondDetails.setTimePeriodUnit("Time Period Unit");
        actualBencomrbidityCondDetails.setVanID(1);
        actualBencomrbidityCondDetails.setVanSerialNo(1L);
        actualBencomrbidityCondDetails.setVehicalNo("Vehical No");
        actualBencomrbidityCondDetails.setVisitCode(1L);
        Timestamp year = mock(Timestamp.class);
        actualBencomrbidityCondDetails.setYear(year);
        Long actualBenVisitID = actualBencomrbidityCondDetails.getBenVisitID();
        Long actualBeneficiaryRegID = actualBencomrbidityCondDetails.getBeneficiaryRegID();
        Date actualCaptureDate = actualBencomrbidityCondDetails.getCaptureDate();
        String actualComorbidCondition = actualBencomrbidityCondDetails.getComorbidCondition();
        Short actualComorbidConditionID = actualBencomrbidityCondDetails.getComorbidConditionID();
        String actualCreatedBy = actualBencomrbidityCondDetails.getCreatedBy();
        Timestamp actualCreatedDate = actualBencomrbidityCondDetails.getCreatedDate();
        Date actualDate = actualBencomrbidityCondDetails.getDate();
        Boolean actualDeleted = actualBencomrbidityCondDetails.getDeleted();
        Long actualID = actualBencomrbidityCondDetails.getID();
        Boolean actualIsForHistory = actualBencomrbidityCondDetails.getIsForHistory();
        Timestamp actualLastModDate = actualBencomrbidityCondDetails.getLastModDate();
        String actualModifiedBy = actualBencomrbidityCondDetails.getModifiedBy();
        String actualOtherComorbidCondition = actualBencomrbidityCondDetails.getOtherComorbidCondition();
        Integer actualParkingPlaceID = actualBencomrbidityCondDetails.getParkingPlaceID();
        String actualProcessed = actualBencomrbidityCondDetails.getProcessed();
        Integer actualProviderServiceMapID = actualBencomrbidityCondDetails.getProviderServiceMapID();
        String actualReservedForChange = actualBencomrbidityCondDetails.getReservedForChange();
        String actualSyncedBy = actualBencomrbidityCondDetails.getSyncedBy();
        Timestamp actualSyncedDate = actualBencomrbidityCondDetails.getSyncedDate();
        Integer actualTimePeriodAgo = actualBencomrbidityCondDetails.getTimePeriodAgo();
        String actualTimePeriodUnit = actualBencomrbidityCondDetails.getTimePeriodUnit();
        Integer actualVanID = actualBencomrbidityCondDetails.getVanID();
        Long actualVanSerialNo = actualBencomrbidityCondDetails.getVanSerialNo();
        String actualVehicalNo = actualBencomrbidityCondDetails.getVehicalNo();
        Long actualVisitCode = actualBencomrbidityCondDetails.getVisitCode();
        Timestamp actualYear = actualBencomrbidityCondDetails.getYear();

        // Assert that nothing has changed
        assertEquals("Comorbid Condition", actualComorbidCondition);
        assertEquals("Jan 1, 2020 8:00am GMT+0100", actualCreatedBy);
        assertEquals("Jan 1, 2020 9:00am GMT+0100", actualModifiedBy);
        assertEquals("Other Comorbid Condition", actualOtherComorbidCondition);
        assertEquals("Processed", actualProcessed);
        assertEquals("Reserved For Change", actualReservedForChange);
        assertEquals("Synced By", actualSyncedBy);
        assertEquals("Time Period Unit", actualTimePeriodUnit);
        assertEquals("Vehical No", actualVehicalNo);
        assertEquals(1, actualParkingPlaceID.intValue());
        assertEquals(1, actualProviderServiceMapID.intValue());
        assertEquals(1, actualTimePeriodAgo.intValue());
        assertEquals(1, actualVanID.intValue());
        assertEquals(1L, actualBenVisitID.longValue());
        assertEquals(1L, actualBeneficiaryRegID.longValue());
        assertEquals(1L, actualID.longValue());
        assertEquals(1L, actualVanSerialNo.longValue());
        assertEquals(1L, actualVisitCode.longValue());
        assertEquals((short) 1, actualComorbidConditionID.shortValue());
        assertTrue(actualDeleted);
        assertTrue(actualIsForHistory);
        assertSame(captureDate, actualCaptureDate);
        assertSame(date, actualDate);
        assertSame(createdDate, actualCreatedDate);
        assertSame(lastModDate, actualLastModDate);
        assertSame(syncedDate, actualSyncedDate);
        assertSame(year, actualYear);
    }

    @Test
    void testGettersAndSetters2() {
        // Arrange and Act
        BencomrbidityCondDetails actualBencomrbidityCondDetails = new BencomrbidityCondDetails((short) 1,
                "Comorbid Condition", "Other Comorbid Condition", true, 1, "Time Period Unit", 1L);
        actualBencomrbidityCondDetails.setBenVisitID(1L);
        actualBencomrbidityCondDetails.setBeneficiaryRegID(1L);
        Date captureDate = mock(Date.class);
        actualBencomrbidityCondDetails.setCaptureDate(captureDate);
        actualBencomrbidityCondDetails.setComorbidCondition("Comorbid Condition");
        actualBencomrbidityCondDetails.setComorbidConditionID((short) 1);
        actualBencomrbidityCondDetails.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        Timestamp createdDate = mock(Timestamp.class);
        actualBencomrbidityCondDetails.setCreatedDate(createdDate);
        Date date = mock(Date.class);
        actualBencomrbidityCondDetails.setDate(date);
        actualBencomrbidityCondDetails.setDeleted(true);
        actualBencomrbidityCondDetails.setID(1L);
        actualBencomrbidityCondDetails.setIsForHistory(true);
        Timestamp lastModDate = mock(Timestamp.class);
        actualBencomrbidityCondDetails.setLastModDate(lastModDate);
        actualBencomrbidityCondDetails.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        actualBencomrbidityCondDetails.setOtherComorbidCondition("Other Comorbid Condition");
        actualBencomrbidityCondDetails.setParkingPlaceID(1);
        actualBencomrbidityCondDetails.setProcessed("Processed");
        actualBencomrbidityCondDetails.setProviderServiceMapID(1);
        actualBencomrbidityCondDetails.setReservedForChange("Reserved For Change");
        actualBencomrbidityCondDetails.setSyncedBy("Synced By");
        Timestamp syncedDate = mock(Timestamp.class);
        actualBencomrbidityCondDetails.setSyncedDate(syncedDate);
        actualBencomrbidityCondDetails.setTimePeriodAgo(1);
        actualBencomrbidityCondDetails.setTimePeriodUnit("Time Period Unit");
        actualBencomrbidityCondDetails.setVanID(1);
        actualBencomrbidityCondDetails.setVanSerialNo(1L);
        actualBencomrbidityCondDetails.setVehicalNo("Vehical No");
        actualBencomrbidityCondDetails.setVisitCode(1L);
        Timestamp year = mock(Timestamp.class);
        actualBencomrbidityCondDetails.setYear(year);
        Long actualBenVisitID = actualBencomrbidityCondDetails.getBenVisitID();
        Long actualBeneficiaryRegID = actualBencomrbidityCondDetails.getBeneficiaryRegID();
        Date actualCaptureDate = actualBencomrbidityCondDetails.getCaptureDate();
        String actualComorbidCondition = actualBencomrbidityCondDetails.getComorbidCondition();
        Short actualComorbidConditionID = actualBencomrbidityCondDetails.getComorbidConditionID();
        String actualCreatedBy = actualBencomrbidityCondDetails.getCreatedBy();
        Timestamp actualCreatedDate = actualBencomrbidityCondDetails.getCreatedDate();
        Date actualDate = actualBencomrbidityCondDetails.getDate();
        Boolean actualDeleted = actualBencomrbidityCondDetails.getDeleted();
        Long actualID = actualBencomrbidityCondDetails.getID();
        Boolean actualIsForHistory = actualBencomrbidityCondDetails.getIsForHistory();
        Timestamp actualLastModDate = actualBencomrbidityCondDetails.getLastModDate();
        String actualModifiedBy = actualBencomrbidityCondDetails.getModifiedBy();
        String actualOtherComorbidCondition = actualBencomrbidityCondDetails.getOtherComorbidCondition();
        Integer actualParkingPlaceID = actualBencomrbidityCondDetails.getParkingPlaceID();
        String actualProcessed = actualBencomrbidityCondDetails.getProcessed();
        Integer actualProviderServiceMapID = actualBencomrbidityCondDetails.getProviderServiceMapID();
        String actualReservedForChange = actualBencomrbidityCondDetails.getReservedForChange();
        String actualSyncedBy = actualBencomrbidityCondDetails.getSyncedBy();
        Timestamp actualSyncedDate = actualBencomrbidityCondDetails.getSyncedDate();
        Integer actualTimePeriodAgo = actualBencomrbidityCondDetails.getTimePeriodAgo();
        String actualTimePeriodUnit = actualBencomrbidityCondDetails.getTimePeriodUnit();
        Integer actualVanID = actualBencomrbidityCondDetails.getVanID();
        Long actualVanSerialNo = actualBencomrbidityCondDetails.getVanSerialNo();
        String actualVehicalNo = actualBencomrbidityCondDetails.getVehicalNo();
        Long actualVisitCode = actualBencomrbidityCondDetails.getVisitCode();
        Timestamp actualYear = actualBencomrbidityCondDetails.getYear();

        // Assert that nothing has changed
        assertEquals("Comorbid Condition", actualComorbidCondition);
        assertEquals("Jan 1, 2020 8:00am GMT+0100", actualCreatedBy);
        assertEquals("Jan 1, 2020 9:00am GMT+0100", actualModifiedBy);
        assertEquals("Other Comorbid Condition", actualOtherComorbidCondition);
        assertEquals("Processed", actualProcessed);
        assertEquals("Reserved For Change", actualReservedForChange);
        assertEquals("Synced By", actualSyncedBy);
        assertEquals("Time Period Unit", actualTimePeriodUnit);
        assertEquals("Vehical No", actualVehicalNo);
        assertEquals(1, actualParkingPlaceID.intValue());
        assertEquals(1, actualProviderServiceMapID.intValue());
        assertEquals(1, actualTimePeriodAgo.intValue());
        assertEquals(1, actualVanID.intValue());
        assertEquals(1L, actualBenVisitID.longValue());
        assertEquals(1L, actualBeneficiaryRegID.longValue());
        assertEquals(1L, actualID.longValue());
        assertEquals(1L, actualVanSerialNo.longValue());
        assertEquals(1L, actualVisitCode.longValue());
        assertEquals((short) 1, actualComorbidConditionID.shortValue());
        assertTrue(actualDeleted);
        assertTrue(actualIsForHistory);
        assertSame(captureDate, actualCaptureDate);
        assertSame(date, actualDate);
        assertSame(createdDate, actualCreatedDate);
        assertSame(lastModDate, actualLastModDate);
        assertSame(syncedDate, actualSyncedDate);
        assertSame(year, actualYear);
    }

    @Test
    void testGettersAndSetters3() {
        // Arrange and Act
        BencomrbidityCondDetails actualBencomrbidityCondDetails = new BencomrbidityCondDetails((short) 1,
                "Comorbid Condition", mock(Timestamp.class), "Other Comorbid Condition");
        actualBencomrbidityCondDetails.setBenVisitID(1L);
        actualBencomrbidityCondDetails.setBeneficiaryRegID(1L);
        Date captureDate = mock(Date.class);
        actualBencomrbidityCondDetails.setCaptureDate(captureDate);
        actualBencomrbidityCondDetails.setComorbidCondition("Comorbid Condition");
        actualBencomrbidityCondDetails.setComorbidConditionID((short) 1);
        actualBencomrbidityCondDetails.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        Timestamp createdDate = mock(Timestamp.class);
        actualBencomrbidityCondDetails.setCreatedDate(createdDate);
        Date date = mock(Date.class);
        actualBencomrbidityCondDetails.setDate(date);
        actualBencomrbidityCondDetails.setDeleted(true);
        actualBencomrbidityCondDetails.setID(1L);
        actualBencomrbidityCondDetails.setIsForHistory(true);
        Timestamp lastModDate = mock(Timestamp.class);
        actualBencomrbidityCondDetails.setLastModDate(lastModDate);
        actualBencomrbidityCondDetails.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        actualBencomrbidityCondDetails.setOtherComorbidCondition("Other Comorbid Condition");
        actualBencomrbidityCondDetails.setParkingPlaceID(1);
        actualBencomrbidityCondDetails.setProcessed("Processed");
        actualBencomrbidityCondDetails.setProviderServiceMapID(1);
        actualBencomrbidityCondDetails.setReservedForChange("Reserved For Change");
        actualBencomrbidityCondDetails.setSyncedBy("Synced By");
        Timestamp syncedDate = mock(Timestamp.class);
        actualBencomrbidityCondDetails.setSyncedDate(syncedDate);
        actualBencomrbidityCondDetails.setTimePeriodAgo(1);
        actualBencomrbidityCondDetails.setTimePeriodUnit("Time Period Unit");
        actualBencomrbidityCondDetails.setVanID(1);
        actualBencomrbidityCondDetails.setVanSerialNo(1L);
        actualBencomrbidityCondDetails.setVehicalNo("Vehical No");
        actualBencomrbidityCondDetails.setVisitCode(1L);
        Timestamp year = mock(Timestamp.class);
        actualBencomrbidityCondDetails.setYear(year);
        Long actualBenVisitID = actualBencomrbidityCondDetails.getBenVisitID();
        Long actualBeneficiaryRegID = actualBencomrbidityCondDetails.getBeneficiaryRegID();
        Date actualCaptureDate = actualBencomrbidityCondDetails.getCaptureDate();
        String actualComorbidCondition = actualBencomrbidityCondDetails.getComorbidCondition();
        Short actualComorbidConditionID = actualBencomrbidityCondDetails.getComorbidConditionID();
        String actualCreatedBy = actualBencomrbidityCondDetails.getCreatedBy();
        Timestamp actualCreatedDate = actualBencomrbidityCondDetails.getCreatedDate();
        Date actualDate = actualBencomrbidityCondDetails.getDate();
        Boolean actualDeleted = actualBencomrbidityCondDetails.getDeleted();
        Long actualID = actualBencomrbidityCondDetails.getID();
        Boolean actualIsForHistory = actualBencomrbidityCondDetails.getIsForHistory();
        Timestamp actualLastModDate = actualBencomrbidityCondDetails.getLastModDate();
        String actualModifiedBy = actualBencomrbidityCondDetails.getModifiedBy();
        String actualOtherComorbidCondition = actualBencomrbidityCondDetails.getOtherComorbidCondition();
        Integer actualParkingPlaceID = actualBencomrbidityCondDetails.getParkingPlaceID();
        String actualProcessed = actualBencomrbidityCondDetails.getProcessed();
        Integer actualProviderServiceMapID = actualBencomrbidityCondDetails.getProviderServiceMapID();
        String actualReservedForChange = actualBencomrbidityCondDetails.getReservedForChange();
        String actualSyncedBy = actualBencomrbidityCondDetails.getSyncedBy();
        Timestamp actualSyncedDate = actualBencomrbidityCondDetails.getSyncedDate();
        Integer actualTimePeriodAgo = actualBencomrbidityCondDetails.getTimePeriodAgo();
        String actualTimePeriodUnit = actualBencomrbidityCondDetails.getTimePeriodUnit();
        Integer actualVanID = actualBencomrbidityCondDetails.getVanID();
        Long actualVanSerialNo = actualBencomrbidityCondDetails.getVanSerialNo();
        String actualVehicalNo = actualBencomrbidityCondDetails.getVehicalNo();
        Long actualVisitCode = actualBencomrbidityCondDetails.getVisitCode();
        Timestamp actualYear = actualBencomrbidityCondDetails.getYear();

        // Assert that nothing has changed
        assertEquals("Comorbid Condition", actualComorbidCondition);
        assertEquals("Jan 1, 2020 8:00am GMT+0100", actualCreatedBy);
        assertEquals("Jan 1, 2020 9:00am GMT+0100", actualModifiedBy);
        assertEquals("Other Comorbid Condition", actualOtherComorbidCondition);
        assertEquals("Processed", actualProcessed);
        assertEquals("Reserved For Change", actualReservedForChange);
        assertEquals("Synced By", actualSyncedBy);
        assertEquals("Time Period Unit", actualTimePeriodUnit);
        assertEquals("Vehical No", actualVehicalNo);
        assertEquals(1, actualParkingPlaceID.intValue());
        assertEquals(1, actualProviderServiceMapID.intValue());
        assertEquals(1, actualTimePeriodAgo.intValue());
        assertEquals(1, actualVanID.intValue());
        assertEquals(1L, actualBenVisitID.longValue());
        assertEquals(1L, actualBeneficiaryRegID.longValue());
        assertEquals(1L, actualID.longValue());
        assertEquals(1L, actualVanSerialNo.longValue());
        assertEquals(1L, actualVisitCode.longValue());
        assertEquals((short) 1, actualComorbidConditionID.shortValue());
        assertTrue(actualDeleted);
        assertTrue(actualIsForHistory);
        assertSame(captureDate, actualCaptureDate);
        assertSame(date, actualDate);
        assertSame(createdDate, actualCreatedDate);
        assertSame(lastModDate, actualLastModDate);
        assertSame(syncedDate, actualSyncedDate);
        assertSame(year, actualYear);
    }

    @Test
    void testGettersAndSetters4() {
        // Arrange and Act
        BencomrbidityCondDetails actualBencomrbidityCondDetails = new BencomrbidityCondDetails(mock(Date.class),
                "Comorbid Condition", "Other Comorbid Condition", mock(Date.class));
        actualBencomrbidityCondDetails.setBenVisitID(1L);
        actualBencomrbidityCondDetails.setBeneficiaryRegID(1L);
        Date captureDate = mock(Date.class);
        actualBencomrbidityCondDetails.setCaptureDate(captureDate);
        actualBencomrbidityCondDetails.setComorbidCondition("Comorbid Condition");
        actualBencomrbidityCondDetails.setComorbidConditionID((short) 1);
        actualBencomrbidityCondDetails.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        Timestamp createdDate = mock(Timestamp.class);
        actualBencomrbidityCondDetails.setCreatedDate(createdDate);
        Date date = mock(Date.class);
        actualBencomrbidityCondDetails.setDate(date);
        actualBencomrbidityCondDetails.setDeleted(true);
        actualBencomrbidityCondDetails.setID(1L);
        actualBencomrbidityCondDetails.setIsForHistory(true);
        Timestamp lastModDate = mock(Timestamp.class);
        actualBencomrbidityCondDetails.setLastModDate(lastModDate);
        actualBencomrbidityCondDetails.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        actualBencomrbidityCondDetails.setOtherComorbidCondition("Other Comorbid Condition");
        actualBencomrbidityCondDetails.setParkingPlaceID(1);
        actualBencomrbidityCondDetails.setProcessed("Processed");
        actualBencomrbidityCondDetails.setProviderServiceMapID(1);
        actualBencomrbidityCondDetails.setReservedForChange("Reserved For Change");
        actualBencomrbidityCondDetails.setSyncedBy("Synced By");
        Timestamp syncedDate = mock(Timestamp.class);
        actualBencomrbidityCondDetails.setSyncedDate(syncedDate);
        actualBencomrbidityCondDetails.setTimePeriodAgo(1);
        actualBencomrbidityCondDetails.setTimePeriodUnit("Time Period Unit");
        actualBencomrbidityCondDetails.setVanID(1);
        actualBencomrbidityCondDetails.setVanSerialNo(1L);
        actualBencomrbidityCondDetails.setVehicalNo("Vehical No");
        actualBencomrbidityCondDetails.setVisitCode(1L);
        Timestamp year = mock(Timestamp.class);
        actualBencomrbidityCondDetails.setYear(year);
        Long actualBenVisitID = actualBencomrbidityCondDetails.getBenVisitID();
        Long actualBeneficiaryRegID = actualBencomrbidityCondDetails.getBeneficiaryRegID();
        Date actualCaptureDate = actualBencomrbidityCondDetails.getCaptureDate();
        String actualComorbidCondition = actualBencomrbidityCondDetails.getComorbidCondition();
        Short actualComorbidConditionID = actualBencomrbidityCondDetails.getComorbidConditionID();
        String actualCreatedBy = actualBencomrbidityCondDetails.getCreatedBy();
        Timestamp actualCreatedDate = actualBencomrbidityCondDetails.getCreatedDate();
        Date actualDate = actualBencomrbidityCondDetails.getDate();
        Boolean actualDeleted = actualBencomrbidityCondDetails.getDeleted();
        Long actualID = actualBencomrbidityCondDetails.getID();
        Boolean actualIsForHistory = actualBencomrbidityCondDetails.getIsForHistory();
        Timestamp actualLastModDate = actualBencomrbidityCondDetails.getLastModDate();
        String actualModifiedBy = actualBencomrbidityCondDetails.getModifiedBy();
        String actualOtherComorbidCondition = actualBencomrbidityCondDetails.getOtherComorbidCondition();
        Integer actualParkingPlaceID = actualBencomrbidityCondDetails.getParkingPlaceID();
        String actualProcessed = actualBencomrbidityCondDetails.getProcessed();
        Integer actualProviderServiceMapID = actualBencomrbidityCondDetails.getProviderServiceMapID();
        String actualReservedForChange = actualBencomrbidityCondDetails.getReservedForChange();
        String actualSyncedBy = actualBencomrbidityCondDetails.getSyncedBy();
        Timestamp actualSyncedDate = actualBencomrbidityCondDetails.getSyncedDate();
        Integer actualTimePeriodAgo = actualBencomrbidityCondDetails.getTimePeriodAgo();
        String actualTimePeriodUnit = actualBencomrbidityCondDetails.getTimePeriodUnit();
        Integer actualVanID = actualBencomrbidityCondDetails.getVanID();
        Long actualVanSerialNo = actualBencomrbidityCondDetails.getVanSerialNo();
        String actualVehicalNo = actualBencomrbidityCondDetails.getVehicalNo();
        Long actualVisitCode = actualBencomrbidityCondDetails.getVisitCode();
        Timestamp actualYear = actualBencomrbidityCondDetails.getYear();

        // Assert that nothing has changed
        assertEquals("Comorbid Condition", actualComorbidCondition);
        assertEquals("Jan 1, 2020 8:00am GMT+0100", actualCreatedBy);
        assertEquals("Jan 1, 2020 9:00am GMT+0100", actualModifiedBy);
        assertEquals("Other Comorbid Condition", actualOtherComorbidCondition);
        assertEquals("Processed", actualProcessed);
        assertEquals("Reserved For Change", actualReservedForChange);
        assertEquals("Synced By", actualSyncedBy);
        assertEquals("Time Period Unit", actualTimePeriodUnit);
        assertEquals("Vehical No", actualVehicalNo);
        assertEquals(1, actualParkingPlaceID.intValue());
        assertEquals(1, actualProviderServiceMapID.intValue());
        assertEquals(1, actualTimePeriodAgo.intValue());
        assertEquals(1, actualVanID.intValue());
        assertEquals(1L, actualBenVisitID.longValue());
        assertEquals(1L, actualBeneficiaryRegID.longValue());
        assertEquals(1L, actualID.longValue());
        assertEquals(1L, actualVanSerialNo.longValue());
        assertEquals(1L, actualVisitCode.longValue());
        assertEquals((short) 1, actualComorbidConditionID.shortValue());
        assertTrue(actualDeleted);
        assertTrue(actualIsForHistory);
        assertSame(captureDate, actualCaptureDate);
        assertSame(date, actualDate);
        assertSame(createdDate, actualCreatedDate);
        assertSame(lastModDate, actualLastModDate);
        assertSame(syncedDate, actualSyncedDate);
        assertSame(year, actualYear);
    }
}
