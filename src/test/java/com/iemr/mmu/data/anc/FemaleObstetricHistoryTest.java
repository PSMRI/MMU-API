package com.iemr.mmu.data.anc;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.mock;

import java.sql.Date;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
@ExtendWith(MockitoExtension.class)
class FemaleObstetricHistoryTest {
    @Test
    void testGettersAndSetters() {
        // Arrange and Act
        FemaleObstetricHistory actualFemaleObstetricHistory = new FemaleObstetricHistory();
        HashMap<String, Object> abortionType = new HashMap<>();
        actualFemaleObstetricHistory.setAbortionType(abortionType);
        actualFemaleObstetricHistory.setAbortionTypeID(1);
        actualFemaleObstetricHistory.setBenVisitID(1L);
        actualFemaleObstetricHistory.setBeneficiaryRegID(1L);
        Date captureDate = mock(Date.class);
        actualFemaleObstetricHistory.setCaptureDate(captureDate);
        actualFemaleObstetricHistory.setCongenitalAnomalies("Congenital Anomalies");
        actualFemaleObstetricHistory.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        Timestamp createdDate = mock(Timestamp.class);
        actualFemaleObstetricHistory.setCreatedDate(createdDate);
        actualFemaleObstetricHistory.setDeleted(true);
        actualFemaleObstetricHistory.setDeliveryComplicationID("Delivery Complication ID");
        ArrayList<Map<String, Object>> deliveryComplicationList = new ArrayList<>();
        actualFemaleObstetricHistory.setDeliveryComplicationList(deliveryComplicationList);
        actualFemaleObstetricHistory.setDeliveryComplicationType("Delivery Complication Type");
        actualFemaleObstetricHistory.setDeliveryPlace("Delivery Place");
        actualFemaleObstetricHistory.setDeliveryPlaceID((short) 1);
        actualFemaleObstetricHistory.setDeliveryType("Delivery Type");
        actualFemaleObstetricHistory.setDeliveryTypeID((short) 1);
        actualFemaleObstetricHistory.setDurationType("Duration Type");
        Timestamp lastModDate = mock(Timestamp.class);
        actualFemaleObstetricHistory.setLastModDate(lastModDate);
        actualFemaleObstetricHistory.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        actualFemaleObstetricHistory.setNewBornComplication("New Born Complication");
        actualFemaleObstetricHistory.setNewBornComplicationID((short) 1);
        actualFemaleObstetricHistory.setObstetricHistoryID(1L);
        actualFemaleObstetricHistory.setOtherDeliveryComplication("Other Delivery Complication");
        actualFemaleObstetricHistory.setOtherDeliveryPlace("Other Delivery Place");
        actualFemaleObstetricHistory.setOtherNewBornComplication("Other New Born Complication");
        actualFemaleObstetricHistory.setOtherPostNatalComplication("Other Post Natal Complication");
        actualFemaleObstetricHistory.setOtherPostpartumCompType("Other Postpartum Comp Type");
        actualFemaleObstetricHistory.setOtherPregComplication("Other Preg Complication");
        actualFemaleObstetricHistory.setParkingPlaceID(1);
        ArrayList<Map<String, Object>> postAbortionComplication = new ArrayList<>();
        actualFemaleObstetricHistory.setPostAbortionComplication(postAbortionComplication);
        actualFemaleObstetricHistory.setPostAbortionComplication_db("Post Abortion Complication db");
        actualFemaleObstetricHistory.setPostAbortionComplicationsValues("42");
        actualFemaleObstetricHistory.setPostNatalComplication("Post Natal Complication");
        actualFemaleObstetricHistory.setPostNatalComplicationID((short) 1);
        actualFemaleObstetricHistory.setPostpartumComplicationID("Postpartum Complication ID");
        ArrayList<Map<String, Object>> postpartumComplicationList = new ArrayList<>();
        actualFemaleObstetricHistory.setPostpartumComplicationList(postpartumComplicationList);
        actualFemaleObstetricHistory.setPostpartumComplicationType("Postpartum Complication Type");
        actualFemaleObstetricHistory.setPregComplicationID("Preg Complication ID");
        ArrayList<Map<String, Object>> pregComplicationList = new ArrayList<>();
        actualFemaleObstetricHistory.setPregComplicationList(pregComplicationList);
        actualFemaleObstetricHistory.setPregComplicationType("Preg Complication Type");
        actualFemaleObstetricHistory.setPregDuration(1);
        actualFemaleObstetricHistory.setPregDurationID((short) 1);
        actualFemaleObstetricHistory.setPregOrder((short) 1);
        actualFemaleObstetricHistory.setPregOutcome("Preg Outcome");
        actualFemaleObstetricHistory.setPregOutcomeID((short) 1);
        actualFemaleObstetricHistory.setProcessed("Processed");
        actualFemaleObstetricHistory.setProviderServiceMapID(1);
        actualFemaleObstetricHistory.setReservedForChange("Reserved For Change");
        actualFemaleObstetricHistory.setServiceFacilityID(1);
        actualFemaleObstetricHistory.setServiceFacilityValue("42");
        actualFemaleObstetricHistory.setSyncedBy("Synced By");
        Timestamp syncedDate = mock(Timestamp.class);
        actualFemaleObstetricHistory.setSyncedDate(syncedDate);
        actualFemaleObstetricHistory.setTotalNoOfPreg((short) 1);
        actualFemaleObstetricHistory.setTypeOfAbortionValue("42");
        HashMap<String, Object> typeofFacility = new HashMap<>();
        actualFemaleObstetricHistory.setTypeofFacility(typeofFacility);
        actualFemaleObstetricHistory.setTypeofFacilityID(1);
        actualFemaleObstetricHistory.setVanID(1);
        actualFemaleObstetricHistory.setVanSerialNo(1L);
        actualFemaleObstetricHistory.setVehicalNo("Vehical No");
        actualFemaleObstetricHistory.setVisitCode(1L);
        Map<String, Object> actualAbortionType = actualFemaleObstetricHistory.getAbortionType();
        Integer actualAbortionTypeID = actualFemaleObstetricHistory.getAbortionTypeID();
        Long actualBenVisitID = actualFemaleObstetricHistory.getBenVisitID();
        Long actualBeneficiaryRegID = actualFemaleObstetricHistory.getBeneficiaryRegID();
        Date actualCaptureDate = actualFemaleObstetricHistory.getCaptureDate();
        String actualCongenitalAnomalies = actualFemaleObstetricHistory.getCongenitalAnomalies();
        String actualCreatedBy = actualFemaleObstetricHistory.getCreatedBy();
        Timestamp actualCreatedDate = actualFemaleObstetricHistory.getCreatedDate();
        Boolean actualDeleted = actualFemaleObstetricHistory.getDeleted();
        String actualDeliveryComplicationID = actualFemaleObstetricHistory.getDeliveryComplicationID();
        ArrayList<Map<String, Object>> actualDeliveryComplicationList = actualFemaleObstetricHistory
                .getDeliveryComplicationList();
        String actualDeliveryComplicationType = actualFemaleObstetricHistory.getDeliveryComplicationType();
        String actualDeliveryPlace = actualFemaleObstetricHistory.getDeliveryPlace();
        Short actualDeliveryPlaceID = actualFemaleObstetricHistory.getDeliveryPlaceID();
        String actualDeliveryType = actualFemaleObstetricHistory.getDeliveryType();
        Short actualDeliveryTypeID = actualFemaleObstetricHistory.getDeliveryTypeID();
        String actualDurationType = actualFemaleObstetricHistory.getDurationType();
        Timestamp actualLastModDate = actualFemaleObstetricHistory.getLastModDate();
        String actualModifiedBy = actualFemaleObstetricHistory.getModifiedBy();
        String actualNewBornComplication = actualFemaleObstetricHistory.getNewBornComplication();
        Short actualNewBornComplicationID = actualFemaleObstetricHistory.getNewBornComplicationID();
        Long actualObstetricHistoryID = actualFemaleObstetricHistory.getObstetricHistoryID();
        String actualOtherDeliveryComplication = actualFemaleObstetricHistory.getOtherDeliveryComplication();
        String actualOtherDeliveryPlace = actualFemaleObstetricHistory.getOtherDeliveryPlace();
        String actualOtherNewBornComplication = actualFemaleObstetricHistory.getOtherNewBornComplication();
        String actualOtherPostNatalComplication = actualFemaleObstetricHistory.getOtherPostNatalComplication();
        String actualOtherPostpartumCompType = actualFemaleObstetricHistory.getOtherPostpartumCompType();
        String actualOtherPregComplication = actualFemaleObstetricHistory.getOtherPregComplication();
        Integer actualParkingPlaceID = actualFemaleObstetricHistory.getParkingPlaceID();
        ArrayList<Map<String, Object>> actualPostAbortionComplication = actualFemaleObstetricHistory
                .getPostAbortionComplication();
        String actualPostAbortionComplication_db = actualFemaleObstetricHistory.getPostAbortionComplication_db();
        String actualPostAbortionComplicationsValues = actualFemaleObstetricHistory.getPostAbortionComplicationsValues();
        String actualPostNatalComplication = actualFemaleObstetricHistory.getPostNatalComplication();
        Short actualPostNatalComplicationID = actualFemaleObstetricHistory.getPostNatalComplicationID();
        String actualPostpartumComplicationID = actualFemaleObstetricHistory.getPostpartumComplicationID();
        ArrayList<Map<String, Object>> actualPostpartumComplicationList = actualFemaleObstetricHistory
                .getPostpartumComplicationList();
        String actualPostpartumComplicationType = actualFemaleObstetricHistory.getPostpartumComplicationType();
        String actualPregComplicationID = actualFemaleObstetricHistory.getPregComplicationID();
        ArrayList<Map<String, Object>> actualPregComplicationList = actualFemaleObstetricHistory.getPregComplicationList();
        String actualPregComplicationType = actualFemaleObstetricHistory.getPregComplicationType();
        Integer actualPregDuration = actualFemaleObstetricHistory.getPregDuration();
        Short actualPregDurationID = actualFemaleObstetricHistory.getPregDurationID();
        Short actualPregOrder = actualFemaleObstetricHistory.getPregOrder();
        String actualPregOutcome = actualFemaleObstetricHistory.getPregOutcome();
        Short actualPregOutcomeID = actualFemaleObstetricHistory.getPregOutcomeID();
        String actualProcessed = actualFemaleObstetricHistory.getProcessed();
        Integer actualProviderServiceMapID = actualFemaleObstetricHistory.getProviderServiceMapID();
        String actualReservedForChange = actualFemaleObstetricHistory.getReservedForChange();
        Integer actualServiceFacilityID = actualFemaleObstetricHistory.getServiceFacilityID();
        String actualServiceFacilityValue = actualFemaleObstetricHistory.getServiceFacilityValue();
        String actualSyncedBy = actualFemaleObstetricHistory.getSyncedBy();
        Timestamp actualSyncedDate = actualFemaleObstetricHistory.getSyncedDate();
        Short actualTotalNoOfPreg = actualFemaleObstetricHistory.getTotalNoOfPreg();
        String actualTypeOfAbortionValue = actualFemaleObstetricHistory.getTypeOfAbortionValue();
        Map<String, Object> actualTypeofFacility = actualFemaleObstetricHistory.getTypeofFacility();
        Integer actualTypeofFacilityID = actualFemaleObstetricHistory.getTypeofFacilityID();
        Integer actualVanID = actualFemaleObstetricHistory.getVanID();
        Long actualVanSerialNo = actualFemaleObstetricHistory.getVanSerialNo();
        String actualVehicalNo = actualFemaleObstetricHistory.getVehicalNo();
        Long actualVisitCode = actualFemaleObstetricHistory.getVisitCode();

        // Assert that nothing has changed
        assertEquals("42", actualPostAbortionComplicationsValues);
        assertEquals("42", actualServiceFacilityValue);
        assertEquals("42", actualTypeOfAbortionValue);
        assertEquals("Congenital Anomalies", actualCongenitalAnomalies);
        assertEquals("Delivery Complication ID", actualDeliveryComplicationID);
        assertEquals("Delivery Complication Type", actualDeliveryComplicationType);
        assertEquals("Delivery Place", actualDeliveryPlace);
        assertEquals("Delivery Type", actualDeliveryType);
        assertEquals("Duration Type", actualDurationType);
        assertEquals("Jan 1, 2020 8:00am GMT+0100", actualCreatedBy);
        assertEquals("Jan 1, 2020 9:00am GMT+0100", actualModifiedBy);
        assertEquals("New Born Complication", actualNewBornComplication);
        assertEquals("Other Delivery Complication", actualOtherDeliveryComplication);
        assertEquals("Other Delivery Place", actualOtherDeliveryPlace);
        assertEquals("Other New Born Complication", actualOtherNewBornComplication);
        assertEquals("Other Post Natal Complication", actualOtherPostNatalComplication);
        assertEquals("Other Postpartum Comp Type", actualOtherPostpartumCompType);
        assertEquals("Other Preg Complication", actualOtherPregComplication);
        assertEquals("Post Abortion Complication db", actualPostAbortionComplication_db);
        assertEquals("Post Natal Complication", actualPostNatalComplication);
        assertEquals("Postpartum Complication ID", actualPostpartumComplicationID);
        assertEquals("Postpartum Complication Type", actualPostpartumComplicationType);
        assertEquals("Preg Complication ID", actualPregComplicationID);
        assertEquals("Preg Complication Type", actualPregComplicationType);
        assertEquals("Preg Outcome", actualPregOutcome);
        assertEquals("Processed", actualProcessed);
        assertEquals("Reserved For Change", actualReservedForChange);
        assertEquals("Synced By", actualSyncedBy);
        assertEquals("Vehical No", actualVehicalNo);
        assertEquals(1, actualAbortionTypeID.intValue());
        assertEquals(1, actualParkingPlaceID.intValue());
        assertEquals(1, actualPregDuration.intValue());
        assertEquals(1, actualProviderServiceMapID.intValue());
        assertEquals(1, actualServiceFacilityID.intValue());
        assertEquals(1, actualTypeofFacilityID.intValue());
        assertEquals(1, actualVanID.intValue());
        assertEquals(1L, actualBenVisitID.longValue());
        assertEquals(1L, actualBeneficiaryRegID.longValue());
        assertEquals(1L, actualObstetricHistoryID.longValue());
        assertEquals(1L, actualVanSerialNo.longValue());
        assertEquals(1L, actualVisitCode.longValue());
        assertEquals((short) 1, actualDeliveryPlaceID.shortValue());
        assertEquals((short) 1, actualDeliveryTypeID.shortValue());
        assertEquals((short) 1, actualNewBornComplicationID.shortValue());
        assertEquals((short) 1, actualPostNatalComplicationID.shortValue());
        assertEquals((short) 1, actualPregDurationID.shortValue());
        assertEquals((short) 1, actualPregOrder.shortValue());
        assertEquals((short) 1, actualPregOutcomeID.shortValue());
        assertEquals((short) 1, actualTotalNoOfPreg.shortValue());
        assertTrue(actualDeleted);
        assertSame(deliveryComplicationList, actualDeliveryComplicationList);
        assertSame(postAbortionComplication, actualPostAbortionComplication);
        assertSame(postpartumComplicationList, actualPostpartumComplicationList);
        assertSame(pregComplicationList, actualPregComplicationList);
        assertSame(abortionType, actualAbortionType);
        assertSame(typeofFacility, actualTypeofFacility);
        assertSame(captureDate, actualCaptureDate);
        assertSame(createdDate, actualCreatedDate);
        assertSame(lastModDate, actualLastModDate);
        assertSame(syncedDate, actualSyncedDate);
    }
    @Test
    void testGettersAndSetters2() {
        // Arrange and Act
        FemaleObstetricHistory actualFemaleObstetricHistory = new FemaleObstetricHistory((short) 1, "Preg Complication ID",
                "Preg Complication Type", "Other Preg Complication", (short) 1, "Duration Type", (short) 1, "Delivery Type",
                (short) 1, "Delivery Place", "Other Delivery Place", "Delivery Complication ID", "Delivery Complication Type",
                "Other Delivery Complication", (short) 1, "Preg Outcome", "Postpartum Complication ID",
                "Postpartum Complication Type", "Other Postpartum Comp Type", (short) 1, "Post Natal Complication",
                "Other Post Natal Complication", "Congenital Anomalies", (short) 1, "New Born Complication",
                "Other New Born Complication", 1L, 1, "Post Abortion Complication db", 1, 1, "42", "Type Of Abortion Val",
                "Service Facility Val");
        HashMap<String, Object> abortionType = new HashMap<>();
        actualFemaleObstetricHistory.setAbortionType(abortionType);
        actualFemaleObstetricHistory.setAbortionTypeID(1);
        actualFemaleObstetricHistory.setBenVisitID(1L);
        actualFemaleObstetricHistory.setBeneficiaryRegID(1L);
        Date captureDate = mock(Date.class);
        actualFemaleObstetricHistory.setCaptureDate(captureDate);
        actualFemaleObstetricHistory.setCongenitalAnomalies("Congenital Anomalies");
        actualFemaleObstetricHistory.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        Timestamp createdDate = mock(Timestamp.class);
        actualFemaleObstetricHistory.setCreatedDate(createdDate);
        actualFemaleObstetricHistory.setDeleted(true);
        actualFemaleObstetricHistory.setDeliveryComplicationID("Delivery Complication ID");
        ArrayList<Map<String, Object>> deliveryComplicationList = new ArrayList<>();
        actualFemaleObstetricHistory.setDeliveryComplicationList(deliveryComplicationList);
        actualFemaleObstetricHistory.setDeliveryComplicationType("Delivery Complication Type");
        actualFemaleObstetricHistory.setDeliveryPlace("Delivery Place");
        actualFemaleObstetricHistory.setDeliveryPlaceID((short) 1);
        actualFemaleObstetricHistory.setDeliveryType("Delivery Type");
        actualFemaleObstetricHistory.setDeliveryTypeID((short) 1);
        actualFemaleObstetricHistory.setDurationType("Duration Type");
        Timestamp lastModDate = mock(Timestamp.class);
        actualFemaleObstetricHistory.setLastModDate(lastModDate);
        actualFemaleObstetricHistory.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        actualFemaleObstetricHistory.setNewBornComplication("New Born Complication");
        actualFemaleObstetricHistory.setNewBornComplicationID((short) 1);
        actualFemaleObstetricHistory.setObstetricHistoryID(1L);
        actualFemaleObstetricHistory.setOtherDeliveryComplication("Other Delivery Complication");
        actualFemaleObstetricHistory.setOtherDeliveryPlace("Other Delivery Place");
        actualFemaleObstetricHistory.setOtherNewBornComplication("Other New Born Complication");
        actualFemaleObstetricHistory.setOtherPostNatalComplication("Other Post Natal Complication");
        actualFemaleObstetricHistory.setOtherPostpartumCompType("Other Postpartum Comp Type");
        actualFemaleObstetricHistory.setOtherPregComplication("Other Preg Complication");
        actualFemaleObstetricHistory.setParkingPlaceID(1);
        ArrayList<Map<String, Object>> postAbortionComplication = new ArrayList<>();
        actualFemaleObstetricHistory.setPostAbortionComplication(postAbortionComplication);
        actualFemaleObstetricHistory.setPostAbortionComplication_db("Post Abortion Complication db");
        actualFemaleObstetricHistory.setPostAbortionComplicationsValues("42");
        actualFemaleObstetricHistory.setPostNatalComplication("Post Natal Complication");
        actualFemaleObstetricHistory.setPostNatalComplicationID((short) 1);
        actualFemaleObstetricHistory.setPostpartumComplicationID("Postpartum Complication ID");
        ArrayList<Map<String, Object>> postpartumComplicationList = new ArrayList<>();
        actualFemaleObstetricHistory.setPostpartumComplicationList(postpartumComplicationList);
        actualFemaleObstetricHistory.setPostpartumComplicationType("Postpartum Complication Type");
        actualFemaleObstetricHistory.setPregComplicationID("Preg Complication ID");
        ArrayList<Map<String, Object>> pregComplicationList = new ArrayList<>();
        actualFemaleObstetricHistory.setPregComplicationList(pregComplicationList);
        actualFemaleObstetricHistory.setPregComplicationType("Preg Complication Type");
        actualFemaleObstetricHistory.setPregDuration(1);
        actualFemaleObstetricHistory.setPregDurationID((short) 1);
        actualFemaleObstetricHistory.setPregOrder((short) 1);
        actualFemaleObstetricHistory.setPregOutcome("Preg Outcome");
        actualFemaleObstetricHistory.setPregOutcomeID((short) 1);
        actualFemaleObstetricHistory.setProcessed("Processed");
        actualFemaleObstetricHistory.setProviderServiceMapID(1);
        actualFemaleObstetricHistory.setReservedForChange("Reserved For Change");
        actualFemaleObstetricHistory.setServiceFacilityID(1);
        actualFemaleObstetricHistory.setServiceFacilityValue("42");
        actualFemaleObstetricHistory.setSyncedBy("Synced By");
        Timestamp syncedDate = mock(Timestamp.class);
        actualFemaleObstetricHistory.setSyncedDate(syncedDate);
        actualFemaleObstetricHistory.setTotalNoOfPreg((short) 1);
        actualFemaleObstetricHistory.setTypeOfAbortionValue("42");
        HashMap<String, Object> typeofFacility = new HashMap<>();
        actualFemaleObstetricHistory.setTypeofFacility(typeofFacility);
        actualFemaleObstetricHistory.setTypeofFacilityID(1);
        actualFemaleObstetricHistory.setVanID(1);
        actualFemaleObstetricHistory.setVanSerialNo(1L);
        actualFemaleObstetricHistory.setVehicalNo("Vehical No");
        actualFemaleObstetricHistory.setVisitCode(1L);
        Map<String, Object> actualAbortionType = actualFemaleObstetricHistory.getAbortionType();
        Integer actualAbortionTypeID = actualFemaleObstetricHistory.getAbortionTypeID();
        Long actualBenVisitID = actualFemaleObstetricHistory.getBenVisitID();
        Long actualBeneficiaryRegID = actualFemaleObstetricHistory.getBeneficiaryRegID();
        Date actualCaptureDate = actualFemaleObstetricHistory.getCaptureDate();
        String actualCongenitalAnomalies = actualFemaleObstetricHistory.getCongenitalAnomalies();
        String actualCreatedBy = actualFemaleObstetricHistory.getCreatedBy();
        Timestamp actualCreatedDate = actualFemaleObstetricHistory.getCreatedDate();
        Boolean actualDeleted = actualFemaleObstetricHistory.getDeleted();
        String actualDeliveryComplicationID = actualFemaleObstetricHistory.getDeliveryComplicationID();
        ArrayList<Map<String, Object>> actualDeliveryComplicationList = actualFemaleObstetricHistory
                .getDeliveryComplicationList();
        String actualDeliveryComplicationType = actualFemaleObstetricHistory.getDeliveryComplicationType();
        String actualDeliveryPlace = actualFemaleObstetricHistory.getDeliveryPlace();
        Short actualDeliveryPlaceID = actualFemaleObstetricHistory.getDeliveryPlaceID();
        String actualDeliveryType = actualFemaleObstetricHistory.getDeliveryType();
        Short actualDeliveryTypeID = actualFemaleObstetricHistory.getDeliveryTypeID();
        String actualDurationType = actualFemaleObstetricHistory.getDurationType();
        Timestamp actualLastModDate = actualFemaleObstetricHistory.getLastModDate();
        String actualModifiedBy = actualFemaleObstetricHistory.getModifiedBy();
        String actualNewBornComplication = actualFemaleObstetricHistory.getNewBornComplication();
        Short actualNewBornComplicationID = actualFemaleObstetricHistory.getNewBornComplicationID();
        Long actualObstetricHistoryID = actualFemaleObstetricHistory.getObstetricHistoryID();
        String actualOtherDeliveryComplication = actualFemaleObstetricHistory.getOtherDeliveryComplication();
        String actualOtherDeliveryPlace = actualFemaleObstetricHistory.getOtherDeliveryPlace();
        String actualOtherNewBornComplication = actualFemaleObstetricHistory.getOtherNewBornComplication();
        String actualOtherPostNatalComplication = actualFemaleObstetricHistory.getOtherPostNatalComplication();
        String actualOtherPostpartumCompType = actualFemaleObstetricHistory.getOtherPostpartumCompType();
        String actualOtherPregComplication = actualFemaleObstetricHistory.getOtherPregComplication();
        Integer actualParkingPlaceID = actualFemaleObstetricHistory.getParkingPlaceID();
        ArrayList<Map<String, Object>> actualPostAbortionComplication = actualFemaleObstetricHistory
                .getPostAbortionComplication();
        String actualPostAbortionComplication_db = actualFemaleObstetricHistory.getPostAbortionComplication_db();
        String actualPostAbortionComplicationsValues = actualFemaleObstetricHistory.getPostAbortionComplicationsValues();
        String actualPostNatalComplication = actualFemaleObstetricHistory.getPostNatalComplication();
        Short actualPostNatalComplicationID = actualFemaleObstetricHistory.getPostNatalComplicationID();
        String actualPostpartumComplicationID = actualFemaleObstetricHistory.getPostpartumComplicationID();
        ArrayList<Map<String, Object>> actualPostpartumComplicationList = actualFemaleObstetricHistory
                .getPostpartumComplicationList();
        String actualPostpartumComplicationType = actualFemaleObstetricHistory.getPostpartumComplicationType();
        String actualPregComplicationID = actualFemaleObstetricHistory.getPregComplicationID();
        ArrayList<Map<String, Object>> actualPregComplicationList = actualFemaleObstetricHistory.getPregComplicationList();
        String actualPregComplicationType = actualFemaleObstetricHistory.getPregComplicationType();
        Integer actualPregDuration = actualFemaleObstetricHistory.getPregDuration();
        Short actualPregDurationID = actualFemaleObstetricHistory.getPregDurationID();
        Short actualPregOrder = actualFemaleObstetricHistory.getPregOrder();
        String actualPregOutcome = actualFemaleObstetricHistory.getPregOutcome();
        Short actualPregOutcomeID = actualFemaleObstetricHistory.getPregOutcomeID();
        String actualProcessed = actualFemaleObstetricHistory.getProcessed();
        Integer actualProviderServiceMapID = actualFemaleObstetricHistory.getProviderServiceMapID();
        String actualReservedForChange = actualFemaleObstetricHistory.getReservedForChange();
        Integer actualServiceFacilityID = actualFemaleObstetricHistory.getServiceFacilityID();
        String actualServiceFacilityValue = actualFemaleObstetricHistory.getServiceFacilityValue();
        String actualSyncedBy = actualFemaleObstetricHistory.getSyncedBy();
        Timestamp actualSyncedDate = actualFemaleObstetricHistory.getSyncedDate();
        Short actualTotalNoOfPreg = actualFemaleObstetricHistory.getTotalNoOfPreg();
        String actualTypeOfAbortionValue = actualFemaleObstetricHistory.getTypeOfAbortionValue();
        Map<String, Object> actualTypeofFacility = actualFemaleObstetricHistory.getTypeofFacility();
        Integer actualTypeofFacilityID = actualFemaleObstetricHistory.getTypeofFacilityID();
        Integer actualVanID = actualFemaleObstetricHistory.getVanID();
        Long actualVanSerialNo = actualFemaleObstetricHistory.getVanSerialNo();
        String actualVehicalNo = actualFemaleObstetricHistory.getVehicalNo();
        Long actualVisitCode = actualFemaleObstetricHistory.getVisitCode();

        // Assert that nothing has changed
        assertEquals("42", actualPostAbortionComplicationsValues);
        assertEquals("42", actualServiceFacilityValue);
        assertEquals("42", actualTypeOfAbortionValue);
        assertEquals("Congenital Anomalies", actualCongenitalAnomalies);
        assertEquals("Delivery Complication ID", actualDeliveryComplicationID);
        assertEquals("Delivery Complication Type", actualDeliveryComplicationType);
        assertEquals("Delivery Place", actualDeliveryPlace);
        assertEquals("Delivery Type", actualDeliveryType);
        assertEquals("Duration Type", actualDurationType);
        assertEquals("Jan 1, 2020 8:00am GMT+0100", actualCreatedBy);
        assertEquals("Jan 1, 2020 9:00am GMT+0100", actualModifiedBy);
        assertEquals("New Born Complication", actualNewBornComplication);
        assertEquals("Other Delivery Complication", actualOtherDeliveryComplication);
        assertEquals("Other Delivery Place", actualOtherDeliveryPlace);
        assertEquals("Other New Born Complication", actualOtherNewBornComplication);
        assertEquals("Other Post Natal Complication", actualOtherPostNatalComplication);
        assertEquals("Other Postpartum Comp Type", actualOtherPostpartumCompType);
        assertEquals("Other Preg Complication", actualOtherPregComplication);
        assertEquals("Post Abortion Complication db", actualPostAbortionComplication_db);
        assertEquals("Post Natal Complication", actualPostNatalComplication);
        assertEquals("Postpartum Complication ID", actualPostpartumComplicationID);
        assertEquals("Postpartum Complication Type", actualPostpartumComplicationType);
        assertEquals("Preg Complication ID", actualPregComplicationID);
        assertEquals("Preg Complication Type", actualPregComplicationType);
        assertEquals("Preg Outcome", actualPregOutcome);
        assertEquals("Processed", actualProcessed);
        assertEquals("Reserved For Change", actualReservedForChange);
        assertEquals("Synced By", actualSyncedBy);
        assertEquals("Vehical No", actualVehicalNo);
        assertEquals(1, actualAbortionTypeID.intValue());
        assertEquals(1, actualParkingPlaceID.intValue());
        assertEquals(1, actualPregDuration.intValue());
        assertEquals(1, actualProviderServiceMapID.intValue());
        assertEquals(1, actualServiceFacilityID.intValue());
        assertEquals(1, actualTypeofFacilityID.intValue());
        assertEquals(1, actualVanID.intValue());
        assertEquals(1L, actualBenVisitID.longValue());
        assertEquals(1L, actualBeneficiaryRegID.longValue());
        assertEquals(1L, actualObstetricHistoryID.longValue());
        assertEquals(1L, actualVanSerialNo.longValue());
        assertEquals(1L, actualVisitCode.longValue());
        assertEquals((short) 1, actualDeliveryPlaceID.shortValue());
        assertEquals((short) 1, actualDeliveryTypeID.shortValue());
        assertEquals((short) 1, actualNewBornComplicationID.shortValue());
        assertEquals((short) 1, actualPostNatalComplicationID.shortValue());
        assertEquals((short) 1, actualPregDurationID.shortValue());
        assertEquals((short) 1, actualPregOrder.shortValue());
        assertEquals((short) 1, actualPregOutcomeID.shortValue());
        assertEquals((short) 1, actualTotalNoOfPreg.shortValue());
        assertTrue(actualDeleted);
        assertSame(deliveryComplicationList, actualDeliveryComplicationList);
        assertSame(postAbortionComplication, actualPostAbortionComplication);
        assertSame(postpartumComplicationList, actualPostpartumComplicationList);
        assertSame(pregComplicationList, actualPregComplicationList);
        assertSame(abortionType, actualAbortionType);
        assertSame(typeofFacility, actualTypeofFacility);
        assertSame(captureDate, actualCaptureDate);
        assertSame(createdDate, actualCreatedDate);
        assertSame(lastModDate, actualLastModDate);
        assertSame(syncedDate, actualSyncedDate);
    }

    @Test
    void testGettersAndSetters3() {
        // Arrange and Act
        FemaleObstetricHistory actualFemaleObstetricHistory = new FemaleObstetricHistory(mock(Date.class), (short) 1,
                "Preg Complication Type", "Other Preg Complication", "Duration Type", "Delivery Type", "Delivery Place",
                "Other Delivery Place", "Delivery Complication Type", "Other Delivery Complication", "Preg Outcome",
                "Postpartum Complication Type", "Other Postpartum Comp Type", "Post Natal Complication",
                "Other Post Natal Complication", "Congenital Anomalies", "New Born Complication",
                "Other New Born Complication");
        HashMap<String, Object> abortionType = new HashMap<>();
        actualFemaleObstetricHistory.setAbortionType(abortionType);
        actualFemaleObstetricHistory.setAbortionTypeID(1);
        actualFemaleObstetricHistory.setBenVisitID(1L);
        actualFemaleObstetricHistory.setBeneficiaryRegID(1L);
        Date captureDate = mock(Date.class);
        actualFemaleObstetricHistory.setCaptureDate(captureDate);
        actualFemaleObstetricHistory.setCongenitalAnomalies("Congenital Anomalies");
        actualFemaleObstetricHistory.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        Timestamp createdDate = mock(Timestamp.class);
        actualFemaleObstetricHistory.setCreatedDate(createdDate);
        actualFemaleObstetricHistory.setDeleted(true);
        actualFemaleObstetricHistory.setDeliveryComplicationID("Delivery Complication ID");
        ArrayList<Map<String, Object>> deliveryComplicationList = new ArrayList<>();
        actualFemaleObstetricHistory.setDeliveryComplicationList(deliveryComplicationList);
        actualFemaleObstetricHistory.setDeliveryComplicationType("Delivery Complication Type");
        actualFemaleObstetricHistory.setDeliveryPlace("Delivery Place");
        actualFemaleObstetricHistory.setDeliveryPlaceID((short) 1);
        actualFemaleObstetricHistory.setDeliveryType("Delivery Type");
        actualFemaleObstetricHistory.setDeliveryTypeID((short) 1);
        actualFemaleObstetricHistory.setDurationType("Duration Type");
        Timestamp lastModDate = mock(Timestamp.class);
        actualFemaleObstetricHistory.setLastModDate(lastModDate);
        actualFemaleObstetricHistory.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        actualFemaleObstetricHistory.setNewBornComplication("New Born Complication");
        actualFemaleObstetricHistory.setNewBornComplicationID((short) 1);
        actualFemaleObstetricHistory.setObstetricHistoryID(1L);
        actualFemaleObstetricHistory.setOtherDeliveryComplication("Other Delivery Complication");
        actualFemaleObstetricHistory.setOtherDeliveryPlace("Other Delivery Place");
        actualFemaleObstetricHistory.setOtherNewBornComplication("Other New Born Complication");
        actualFemaleObstetricHistory.setOtherPostNatalComplication("Other Post Natal Complication");
        actualFemaleObstetricHistory.setOtherPostpartumCompType("Other Postpartum Comp Type");
        actualFemaleObstetricHistory.setOtherPregComplication("Other Preg Complication");
        actualFemaleObstetricHistory.setParkingPlaceID(1);
        ArrayList<Map<String, Object>> postAbortionComplication = new ArrayList<>();
        actualFemaleObstetricHistory.setPostAbortionComplication(postAbortionComplication);
        actualFemaleObstetricHistory.setPostAbortionComplication_db("Post Abortion Complication db");
        actualFemaleObstetricHistory.setPostAbortionComplicationsValues("42");
        actualFemaleObstetricHistory.setPostNatalComplication("Post Natal Complication");
        actualFemaleObstetricHistory.setPostNatalComplicationID((short) 1);
        actualFemaleObstetricHistory.setPostpartumComplicationID("Postpartum Complication ID");
        ArrayList<Map<String, Object>> postpartumComplicationList = new ArrayList<>();
        actualFemaleObstetricHistory.setPostpartumComplicationList(postpartumComplicationList);
        actualFemaleObstetricHistory.setPostpartumComplicationType("Postpartum Complication Type");
        actualFemaleObstetricHistory.setPregComplicationID("Preg Complication ID");
        ArrayList<Map<String, Object>> pregComplicationList = new ArrayList<>();
        actualFemaleObstetricHistory.setPregComplicationList(pregComplicationList);
        actualFemaleObstetricHistory.setPregComplicationType("Preg Complication Type");
        actualFemaleObstetricHistory.setPregDuration(1);
        actualFemaleObstetricHistory.setPregDurationID((short) 1);
        actualFemaleObstetricHistory.setPregOrder((short) 1);
        actualFemaleObstetricHistory.setPregOutcome("Preg Outcome");
        actualFemaleObstetricHistory.setPregOutcomeID((short) 1);
        actualFemaleObstetricHistory.setProcessed("Processed");
        actualFemaleObstetricHistory.setProviderServiceMapID(1);
        actualFemaleObstetricHistory.setReservedForChange("Reserved For Change");
        actualFemaleObstetricHistory.setServiceFacilityID(1);
        actualFemaleObstetricHistory.setServiceFacilityValue("42");
        actualFemaleObstetricHistory.setSyncedBy("Synced By");
        Timestamp syncedDate = mock(Timestamp.class);
        actualFemaleObstetricHistory.setSyncedDate(syncedDate);
        actualFemaleObstetricHistory.setTotalNoOfPreg((short) 1);
        actualFemaleObstetricHistory.setTypeOfAbortionValue("42");
        HashMap<String, Object> typeofFacility = new HashMap<>();
        actualFemaleObstetricHistory.setTypeofFacility(typeofFacility);
        actualFemaleObstetricHistory.setTypeofFacilityID(1);
        actualFemaleObstetricHistory.setVanID(1);
        actualFemaleObstetricHistory.setVanSerialNo(1L);
        actualFemaleObstetricHistory.setVehicalNo("Vehical No");
        actualFemaleObstetricHistory.setVisitCode(1L);
        Map<String, Object> actualAbortionType = actualFemaleObstetricHistory.getAbortionType();
        Integer actualAbortionTypeID = actualFemaleObstetricHistory.getAbortionTypeID();
        Long actualBenVisitID = actualFemaleObstetricHistory.getBenVisitID();
        Long actualBeneficiaryRegID = actualFemaleObstetricHistory.getBeneficiaryRegID();
        Date actualCaptureDate = actualFemaleObstetricHistory.getCaptureDate();
        String actualCongenitalAnomalies = actualFemaleObstetricHistory.getCongenitalAnomalies();
        String actualCreatedBy = actualFemaleObstetricHistory.getCreatedBy();
        Timestamp actualCreatedDate = actualFemaleObstetricHistory.getCreatedDate();
        Boolean actualDeleted = actualFemaleObstetricHistory.getDeleted();
        String actualDeliveryComplicationID = actualFemaleObstetricHistory.getDeliveryComplicationID();
        ArrayList<Map<String, Object>> actualDeliveryComplicationList = actualFemaleObstetricHistory
                .getDeliveryComplicationList();
        String actualDeliveryComplicationType = actualFemaleObstetricHistory.getDeliveryComplicationType();
        String actualDeliveryPlace = actualFemaleObstetricHistory.getDeliveryPlace();
        Short actualDeliveryPlaceID = actualFemaleObstetricHistory.getDeliveryPlaceID();
        String actualDeliveryType = actualFemaleObstetricHistory.getDeliveryType();
        Short actualDeliveryTypeID = actualFemaleObstetricHistory.getDeliveryTypeID();
        String actualDurationType = actualFemaleObstetricHistory.getDurationType();
        Timestamp actualLastModDate = actualFemaleObstetricHistory.getLastModDate();
        String actualModifiedBy = actualFemaleObstetricHistory.getModifiedBy();
        String actualNewBornComplication = actualFemaleObstetricHistory.getNewBornComplication();
        Short actualNewBornComplicationID = actualFemaleObstetricHistory.getNewBornComplicationID();
        Long actualObstetricHistoryID = actualFemaleObstetricHistory.getObstetricHistoryID();
        String actualOtherDeliveryComplication = actualFemaleObstetricHistory.getOtherDeliveryComplication();
        String actualOtherDeliveryPlace = actualFemaleObstetricHistory.getOtherDeliveryPlace();
        String actualOtherNewBornComplication = actualFemaleObstetricHistory.getOtherNewBornComplication();
        String actualOtherPostNatalComplication = actualFemaleObstetricHistory.getOtherPostNatalComplication();
        String actualOtherPostpartumCompType = actualFemaleObstetricHistory.getOtherPostpartumCompType();
        String actualOtherPregComplication = actualFemaleObstetricHistory.getOtherPregComplication();
        Integer actualParkingPlaceID = actualFemaleObstetricHistory.getParkingPlaceID();
        ArrayList<Map<String, Object>> actualPostAbortionComplication = actualFemaleObstetricHistory
                .getPostAbortionComplication();
        String actualPostAbortionComplication_db = actualFemaleObstetricHistory.getPostAbortionComplication_db();
        String actualPostAbortionComplicationsValues = actualFemaleObstetricHistory.getPostAbortionComplicationsValues();
        String actualPostNatalComplication = actualFemaleObstetricHistory.getPostNatalComplication();
        Short actualPostNatalComplicationID = actualFemaleObstetricHistory.getPostNatalComplicationID();
        String actualPostpartumComplicationID = actualFemaleObstetricHistory.getPostpartumComplicationID();
        ArrayList<Map<String, Object>> actualPostpartumComplicationList = actualFemaleObstetricHistory
                .getPostpartumComplicationList();
        String actualPostpartumComplicationType = actualFemaleObstetricHistory.getPostpartumComplicationType();
        String actualPregComplicationID = actualFemaleObstetricHistory.getPregComplicationID();
        ArrayList<Map<String, Object>> actualPregComplicationList = actualFemaleObstetricHistory.getPregComplicationList();
        String actualPregComplicationType = actualFemaleObstetricHistory.getPregComplicationType();
        Integer actualPregDuration = actualFemaleObstetricHistory.getPregDuration();
        Short actualPregDurationID = actualFemaleObstetricHistory.getPregDurationID();
        Short actualPregOrder = actualFemaleObstetricHistory.getPregOrder();
        String actualPregOutcome = actualFemaleObstetricHistory.getPregOutcome();
        Short actualPregOutcomeID = actualFemaleObstetricHistory.getPregOutcomeID();
        String actualProcessed = actualFemaleObstetricHistory.getProcessed();
        Integer actualProviderServiceMapID = actualFemaleObstetricHistory.getProviderServiceMapID();
        String actualReservedForChange = actualFemaleObstetricHistory.getReservedForChange();
        Integer actualServiceFacilityID = actualFemaleObstetricHistory.getServiceFacilityID();
        String actualServiceFacilityValue = actualFemaleObstetricHistory.getServiceFacilityValue();
        String actualSyncedBy = actualFemaleObstetricHistory.getSyncedBy();
        Timestamp actualSyncedDate = actualFemaleObstetricHistory.getSyncedDate();
        Short actualTotalNoOfPreg = actualFemaleObstetricHistory.getTotalNoOfPreg();
        String actualTypeOfAbortionValue = actualFemaleObstetricHistory.getTypeOfAbortionValue();
        Map<String, Object> actualTypeofFacility = actualFemaleObstetricHistory.getTypeofFacility();
        Integer actualTypeofFacilityID = actualFemaleObstetricHistory.getTypeofFacilityID();
        Integer actualVanID = actualFemaleObstetricHistory.getVanID();
        Long actualVanSerialNo = actualFemaleObstetricHistory.getVanSerialNo();
        String actualVehicalNo = actualFemaleObstetricHistory.getVehicalNo();
        Long actualVisitCode = actualFemaleObstetricHistory.getVisitCode();

        // Assert that nothing has changed
        assertEquals("42", actualPostAbortionComplicationsValues);
        assertEquals("42", actualServiceFacilityValue);
        assertEquals("42", actualTypeOfAbortionValue);
        assertEquals("Congenital Anomalies", actualCongenitalAnomalies);
        assertEquals("Delivery Complication ID", actualDeliveryComplicationID);
        assertEquals("Delivery Complication Type", actualDeliveryComplicationType);
        assertEquals("Delivery Place", actualDeliveryPlace);
        assertEquals("Delivery Type", actualDeliveryType);
        assertEquals("Duration Type", actualDurationType);
        assertEquals("Jan 1, 2020 8:00am GMT+0100", actualCreatedBy);
        assertEquals("Jan 1, 2020 9:00am GMT+0100", actualModifiedBy);
        assertEquals("New Born Complication", actualNewBornComplication);
        assertEquals("Other Delivery Complication", actualOtherDeliveryComplication);
        assertEquals("Other Delivery Place", actualOtherDeliveryPlace);
        assertEquals("Other New Born Complication", actualOtherNewBornComplication);
        assertEquals("Other Post Natal Complication", actualOtherPostNatalComplication);
        assertEquals("Other Postpartum Comp Type", actualOtherPostpartumCompType);
        assertEquals("Other Preg Complication", actualOtherPregComplication);
        assertEquals("Post Abortion Complication db", actualPostAbortionComplication_db);
        assertEquals("Post Natal Complication", actualPostNatalComplication);
        assertEquals("Postpartum Complication ID", actualPostpartumComplicationID);
        assertEquals("Postpartum Complication Type", actualPostpartumComplicationType);
        assertEquals("Preg Complication ID", actualPregComplicationID);
        assertEquals("Preg Complication Type", actualPregComplicationType);
        assertEquals("Preg Outcome", actualPregOutcome);
        assertEquals("Processed", actualProcessed);
        assertEquals("Reserved For Change", actualReservedForChange);
        assertEquals("Synced By", actualSyncedBy);
        assertEquals("Vehical No", actualVehicalNo);
        assertEquals(1, actualAbortionTypeID.intValue());
        assertEquals(1, actualParkingPlaceID.intValue());
        assertEquals(1, actualPregDuration.intValue());
        assertEquals(1, actualProviderServiceMapID.intValue());
        assertEquals(1, actualServiceFacilityID.intValue());
        assertEquals(1, actualTypeofFacilityID.intValue());
        assertEquals(1, actualVanID.intValue());
        assertEquals(1L, actualBenVisitID.longValue());
        assertEquals(1L, actualBeneficiaryRegID.longValue());
        assertEquals(1L, actualObstetricHistoryID.longValue());
        assertEquals(1L, actualVanSerialNo.longValue());
        assertEquals(1L, actualVisitCode.longValue());
        assertEquals((short) 1, actualDeliveryPlaceID.shortValue());
        assertEquals((short) 1, actualDeliveryTypeID.shortValue());
        assertEquals((short) 1, actualNewBornComplicationID.shortValue());
        assertEquals((short) 1, actualPostNatalComplicationID.shortValue());
        assertEquals((short) 1, actualPregDurationID.shortValue());
        assertEquals((short) 1, actualPregOrder.shortValue());
        assertEquals((short) 1, actualPregOutcomeID.shortValue());
        assertEquals((short) 1, actualTotalNoOfPreg.shortValue());
        assertTrue(actualDeleted);
        assertSame(deliveryComplicationList, actualDeliveryComplicationList);
        assertSame(postAbortionComplication, actualPostAbortionComplication);
        assertSame(postpartumComplicationList, actualPostpartumComplicationList);
        assertSame(pregComplicationList, actualPregComplicationList);
        assertSame(abortionType, actualAbortionType);
        assertSame(typeofFacility, actualTypeofFacility);
        assertSame(captureDate, actualCaptureDate);
        assertSame(createdDate, actualCreatedDate);
        assertSame(lastModDate, actualLastModDate);
        assertSame(syncedDate, actualSyncedDate);
    }
}
